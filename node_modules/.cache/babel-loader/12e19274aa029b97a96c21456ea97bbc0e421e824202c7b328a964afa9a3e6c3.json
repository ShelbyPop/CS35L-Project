{"ast":null,"code":"'use client';\n\nimport React, { useRef, useEffect } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport '../CloseButton/CloseIcon.mjs';\nimport { CloseButton } from '../CloseButton/CloseButton.mjs';\nimport { FileButton } from '../FileButton/FileButton.mjs';\nimport { Input } from '../Input/Input.mjs';\nimport '../Input/InputWrapper/InputWrapper.mjs';\nimport '../Input/InputDescription/InputDescription.mjs';\nimport '../Input/InputError/InputError.mjs';\nimport '../Input/InputLabel/InputLabel.mjs';\nimport '../Input/InputPlaceholder/InputPlaceholder.mjs';\nimport '../Input/InputWrapper.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nconst DefaultValue = ({\n  value\n}) => /* @__PURE__ */React.createElement(\"div\", {\n  style: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\"\n  }\n}, Array.isArray(value) ? value.map(file => file.name).join(\", \") : value?.name);\nconst defaultProps = {\n  valueComponent: DefaultValue\n};\nconst _FileInput = factory((_props, ref) => {\n  const props = useProps(\"FileInput\", defaultProps, _props);\n  const {\n    unstyled,\n    vars,\n    onChange,\n    value,\n    defaultValue,\n    multiple,\n    accept,\n    name,\n    form,\n    valueComponent,\n    clearable,\n    clearButtonProps,\n    readOnly,\n    capture,\n    fileInputProps,\n    rightSection,\n    size,\n    placeholder,\n    ...others\n  } = props;\n  const resetRef = useRef(null);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    onChange,\n    finalValue: multiple ? [] : null\n  });\n  const hasValue = Array.isArray(_value) ? _value.length !== 0 : _value !== null;\n  const _rightSection = rightSection || (clearable && hasValue && !readOnly ? /* @__PURE__ */React.createElement(CloseButton, {\n    ...clearButtonProps,\n    variant: \"subtle\",\n    onClick: () => setValue(multiple ? [] : null),\n    size,\n    unstyled\n  }) : null);\n  useEffect(() => {\n    if (Array.isArray(_value) && _value.length === 0 || _value === null) {\n      resetRef.current?.();\n    }\n  }, [_value]);\n  const ValueComponent = valueComponent;\n  return /* @__PURE__ */React.createElement(FileButton, {\n    onChange: setValue,\n    multiple,\n    accept,\n    name,\n    form,\n    resetRef,\n    disabled: readOnly,\n    capture,\n    inputProps: fileInputProps\n  }, fileButtonProps => /* @__PURE__ */React.createElement(InputBase, {\n    component: \"button\",\n    ref,\n    rightSection: _rightSection,\n    ...fileButtonProps,\n    ...others,\n    __staticSelector: \"FileInput\",\n    multiline: true,\n    type: \"button\",\n    pointer: true,\n    __stylesApiProps: props,\n    unstyled,\n    size\n  }, !hasValue ? /* @__PURE__ */React.createElement(Input.Placeholder, null, placeholder) : /* @__PURE__ */React.createElement(ValueComponent, {\n    value: _value\n  })));\n});\n_FileInput.classes = InputBase.classes;\n_FileInput.displayName = \"@mantine/core/FileInput\";\nconst FileInput = _FileInput;\nexport { FileInput };","map":{"version":3,"names":["DefaultValue","value","React","createElement","style","overflow","textOverflow","whiteSpace","Array","isArray","map","file","name","join","defaultProps","valueComponent","_FileInput","factory","_props","ref","props","useProps","unstyled","vars","onChange","defaultValue","multiple","accept","form","clearable","clearButtonProps","readOnly","capture","fileInputProps","rightSection","size","placeholder","others","resetRef","useRef","_value","setValue","useUncontrolled","finalValue","hasValue","length","_rightSection","CloseButton","variant","onClick","useEffect","current","ValueComponent","FileButton","disabled","inputProps","fileButtonProps","InputBase","component","__staticSelector","multiline","type","pointer","__stylesApiProps","Input","Placeholder","classes","displayName","FileInput"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/components/FileInput/FileInput.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { BoxProps, ElementProps, factory, Factory, StylesApiProps, useProps } from '../../core';\nimport { CloseButton } from '../CloseButton';\nimport { FileButton } from '../FileButton';\nimport { __BaseInputProps, __InputStylesNames, Input, InputVariant } from '../Input';\nimport { InputBase } from '../InputBase/InputBase';\n\nexport interface FileInputProps<Multiple = false>\n  extends BoxProps,\n    __BaseInputProps,\n    StylesApiProps<FileInputFactory>,\n    ElementProps<'button', 'value' | 'defaultValue' | 'onChange' | 'placeholder'> {\n  /** Called when value changes */\n  onChange?: (payload: Multiple extends true ? File[] : File | null) => void;\n\n  /** Controlled component value */\n  value?: Multiple extends true ? File[] : File | null;\n\n  /** Uncontrolled component default value */\n  defaultValue?: Multiple extends true ? File[] : File | null;\n\n  /** Determines whether user can pick more than one file, `false` by default */\n  multiple?: Multiple;\n\n  /** File input accept attribute, for example, `\"image/png,image/jpeg\"` */\n  accept?: string;\n\n  /** Input name attribute */\n  name?: string;\n\n  /** Input form attribute */\n  form?: string;\n\n  /** Value renderer. By default, file name is displayed. */\n  valueComponent?: React.FC<{ value: null | File | File[] }>;\n\n  /** Determines whether clear button should be displayed in the right section, `false` by default */\n  clearable?: boolean;\n\n  /** Props passed down to the clear button */\n  clearButtonProps?: React.ComponentPropsWithoutRef<'button'>;\n\n  /** If set, the input value cannot be changed  */\n  readOnly?: boolean;\n\n  /** Specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute. */\n  capture?: boolean | 'user' | 'environment';\n\n  /** Props passed down to the hidden input element which is used to capture files */\n  fileInputProps?: React.ComponentPropsWithoutRef<'input'>;\n\n  /** Input placeholder */\n  placeholder?: React.ReactNode;\n}\n\nexport type FileInputFactory = Factory<{\n  props: FileInputProps;\n  ref: HTMLButtonElement;\n  stylesNames: __InputStylesNames;\n  variant: InputVariant;\n}>;\n\nconst DefaultValue: FileInputProps['valueComponent'] = ({ value }) => (\n  <div style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n    {Array.isArray(value) ? value.map((file) => file.name).join(', ') : value?.name}\n  </div>\n);\n\nconst defaultProps: Partial<FileInputProps> = {\n  valueComponent: DefaultValue,\n};\n\nconst _FileInput = factory<FileInputFactory>((_props, ref) => {\n  const props = useProps('FileInput', defaultProps, _props);\n  const {\n    unstyled,\n    vars,\n    onChange,\n    value,\n    defaultValue,\n    multiple,\n    accept,\n    name,\n    form,\n    valueComponent,\n    clearable,\n    clearButtonProps,\n    readOnly,\n    capture,\n    fileInputProps,\n    rightSection,\n    size,\n    placeholder,\n    ...others\n  } = props;\n\n  const resetRef = useRef<() => void>(null);\n\n  const [_value, setValue] = useUncontrolled<null | File | File[]>({\n    value,\n    defaultValue,\n    onChange: onChange as any,\n    finalValue: multiple ? [] : null,\n  });\n\n  const hasValue = Array.isArray(_value) ? _value.length !== 0 : _value !== null;\n\n  const _rightSection =\n    rightSection ||\n    (clearable && hasValue && !readOnly ? (\n      <CloseButton\n        {...clearButtonProps}\n        variant=\"subtle\"\n        onClick={() => setValue(multiple ? [] : null)}\n        size={size}\n        unstyled={unstyled}\n      />\n    ) : null);\n\n  useEffect(() => {\n    if ((Array.isArray(_value) && _value.length === 0) || _value === null) {\n      resetRef.current?.();\n    }\n  }, [_value]);\n\n  const ValueComponent = valueComponent!;\n\n  return (\n    <FileButton\n      onChange={setValue}\n      multiple={multiple}\n      accept={accept}\n      name={name}\n      form={form}\n      resetRef={resetRef}\n      disabled={readOnly}\n      capture={capture}\n      inputProps={fileInputProps}\n    >\n      {(fileButtonProps) => (\n        <InputBase\n          component=\"button\"\n          ref={ref}\n          rightSection={_rightSection}\n          {...fileButtonProps}\n          {...others}\n          __staticSelector=\"FileInput\"\n          multiline\n          type=\"button\"\n          pointer\n          __stylesApiProps={props}\n          unstyled={unstyled}\n          size={size}\n        >\n          {!hasValue ? (\n            <Input.Placeholder>{placeholder}</Input.Placeholder>\n          ) : (\n            <ValueComponent value={_value} />\n          )}\n        </InputBase>\n      )}\n    </FileButton>\n  );\n});\n\n_FileInput.classes = InputBase.classes;\n_FileInput.displayName = '@mantine/core/FileInput';\n\ntype FileInputComponent = <Multiple extends boolean = false>(\n  props: FileInputProps<Multiple> & {\n    ref?: React.ForwardedRef<HTMLButtonElement>;\n  }\n) => JSX.Element;\n\nexport const FileInput: FileInputComponent = _FileInput as any;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}