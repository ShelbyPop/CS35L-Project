{"ast":null,"code":"function getTransformedScaledValue(value) {\n  if (typeof value !== \"string\" || !value.includes(\"var(--mantine-scale)\")) {\n    return value;\n  }\n  return value.match(/^calc\\((.*?)\\)$/)?.[1].split(\"*\")[0].trim();\n}\nfunction px(value) {\n  const transformedValue = getTransformedScaledValue(value);\n  if (typeof transformedValue === \"number\") {\n    return transformedValue;\n  }\n  if (typeof transformedValue === \"string\") {\n    if (transformedValue.includes(\"calc\") || transformedValue.includes(\"var\")) {\n      return transformedValue;\n    }\n    if (transformedValue.includes(\"px\")) {\n      return Number(transformedValue.replace(\"px\", \"\"));\n    }\n    if (transformedValue.includes(\"rem\")) {\n      return Number(transformedValue.replace(\"rem\", \"\")) * 16;\n    }\n    if (transformedValue.includes(\"em\")) {\n      return Number(transformedValue.replace(\"em\", \"\")) * 16;\n    }\n    return Number(transformedValue);\n  }\n  return NaN;\n}\nexport { px };","map":{"version":3,"names":["getTransformedScaledValue","value","includes","match","split","trim","px","transformedValue","Number","replace","NaN"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/core/utils/units-converters/px.ts"],"sourcesContent":["function getTransformedScaledValue(value: unknown) {\n  if (typeof value !== 'string' || !value.includes('var(--mantine-scale)')) {\n    return value;\n  }\n\n  return value\n    .match(/^calc\\((.*?)\\)$/)?.[1]\n    .split('*')[0]\n    .trim();\n}\n\nexport function px(value: unknown) {\n  const transformedValue = getTransformedScaledValue(value);\n\n  if (typeof transformedValue === 'number') {\n    return transformedValue;\n  }\n\n  if (typeof transformedValue === 'string') {\n    if (transformedValue.includes('calc') || transformedValue.includes('var')) {\n      return transformedValue;\n    }\n\n    if (transformedValue.includes('px')) {\n      return Number(transformedValue.replace('px', ''));\n    }\n\n    if (transformedValue.includes('rem')) {\n      return Number(transformedValue.replace('rem', '')) * 16;\n    }\n\n    if (transformedValue.includes('em')) {\n      return Number(transformedValue.replace('em', '')) * 16;\n    }\n\n    return Number(transformedValue);\n  }\n\n  return NaN;\n}\n"],"mappings":"AACA,SAASA,yBAAyBA,CAACC,KAAK,EAAE;EACxC,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACA,KAAK,CAACC,QAAQ,CAAC,sBAAsB,CAAC,EAAE;IACxE,OAAOD,KAAK;EAChB;EACE,OAAOA,KAAK,CAACE,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,EAAE;AACjE;AACO,SAASC,EAAEA,CAACL,KAAK,EAAE;EACxB,MAAMM,gBAAgB,GAAGP,yBAAyB,CAACC,KAAK,CAAC;EACzD,IAAI,OAAOM,gBAAgB,KAAK,QAAQ,EAAE;IACxC,OAAOA,gBAAgB;EAC3B;EACE,IAAI,OAAOA,gBAAgB,KAAK,QAAQ,EAAE;IACxC,IAAIA,gBAAgB,CAACL,QAAQ,CAAC,MAAM,CAAC,IAAIK,gBAAgB,CAACL,QAAQ,CAAC,KAAK,CAAC,EAAE;MACzE,OAAOK,gBAAgB;IAC7B;IACI,IAAIA,gBAAgB,CAACL,QAAQ,CAAC,IAAI,CAAC,EAAE;MACnC,OAAOM,MAAM,CAACD,gBAAgB,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACvD;IACI,IAAIF,gBAAgB,CAACL,QAAQ,CAAC,KAAK,CAAC,EAAE;MACpC,OAAOM,MAAM,CAACD,gBAAgB,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE;IAC7D;IACI,IAAIF,gBAAgB,CAACL,QAAQ,CAAC,IAAI,CAAC,EAAE;MACnC,OAAOM,MAAM,CAACD,gBAAgB,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE;IAC5D;IACI,OAAOD,MAAM,CAACD,gBAAgB,CAAC;EACnC;EACE,OAAOG,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}