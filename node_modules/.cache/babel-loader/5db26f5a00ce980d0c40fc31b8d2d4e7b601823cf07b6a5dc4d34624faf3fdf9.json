{"ast":null,"code":"'use client';\n\nfunction parseHotkey(hotkey) {\n  const keys = hotkey.toLowerCase().split(\"+\").map(part => part.trim());\n  const modifiers = {\n    alt: keys.includes(\"alt\"),\n    ctrl: keys.includes(\"ctrl\"),\n    meta: keys.includes(\"meta\"),\n    mod: keys.includes(\"mod\"),\n    shift: keys.includes(\"shift\")\n  };\n  const reservedKeys = [\"alt\", \"ctrl\", \"meta\", \"shift\", \"mod\"];\n  const freeKey = keys.find(key => !reservedKeys.includes(key));\n  return {\n    ...modifiers,\n    key: freeKey\n  };\n}\nfunction isExactHotkey(hotkey, event) {\n  const {\n    alt,\n    ctrl,\n    meta,\n    mod,\n    shift,\n    key\n  } = hotkey;\n  const {\n    altKey,\n    ctrlKey,\n    metaKey,\n    shiftKey,\n    key: pressedKey\n  } = event;\n  if (alt !== altKey) {\n    return false;\n  }\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n  if (key && (pressedKey.toLowerCase() === key.toLowerCase() || event.code.replace(\"Key\", \"\").toLowerCase() === key.toLowerCase())) {\n    return true;\n  }\n  return false;\n}\nfunction getHotkeyMatcher(hotkey) {\n  return event => isExactHotkey(parseHotkey(hotkey), event);\n}\nfunction getHotkeyHandler(hotkeys) {\n  return event => {\n    const _event = \"nativeEvent\" in event ? event.nativeEvent : event;\n    hotkeys.forEach(([hotkey, handler, options = {\n      preventDefault: true\n    }]) => {\n      if (getHotkeyMatcher(hotkey)(_event)) {\n        if (options.preventDefault) {\n          event.preventDefault();\n        }\n        handler(_event);\n      }\n    });\n  };\n}\nexport { getHotkeyHandler, getHotkeyMatcher, parseHotkey };","map":{"version":3,"names":["parseHotkey","hotkey","keys","toLowerCase","split","map","part","trim","modifiers","alt","includes","ctrl","meta","mod","shift","reservedKeys","freeKey","find","key","isExactHotkey","event","altKey","ctrlKey","metaKey","shiftKey","pressedKey","code","replace","getHotkeyMatcher","getHotkeyHandler","hotkeys","_event","nativeEvent","forEach","handler","options","preventDefault"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/hooks/src/use-hotkeys/parse-hotkey.ts"],"sourcesContent":["export type KeyboardModifiers = {\n  alt: boolean;\n  ctrl: boolean;\n  meta: boolean;\n  mod: boolean;\n  shift: boolean;\n};\n\nexport type Hotkey = KeyboardModifiers & {\n  key?: string;\n};\n\ntype CheckHotkeyMatch = (event: KeyboardEvent) => boolean;\n\nexport function parseHotkey(hotkey: string): Hotkey {\n  const keys = hotkey\n    .toLowerCase()\n    .split('+')\n    .map((part) => part.trim());\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n    shift: keys.includes('shift'),\n  };\n\n  const reservedKeys = ['alt', 'ctrl', 'meta', 'shift', 'mod'];\n\n  const freeKey = keys.find((key) => !reservedKeys.includes(key));\n\n  return {\n    ...modifiers,\n    key: freeKey,\n  };\n}\n\nfunction isExactHotkey(hotkey: Hotkey, event: KeyboardEvent): boolean {\n  const { alt, ctrl, meta, mod, shift, key } = hotkey;\n  const { altKey, ctrlKey, metaKey, shiftKey, key: pressedKey } = event;\n\n  if (alt !== altKey) {\n    return false;\n  }\n\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n\n  if (\n    key &&\n    (pressedKey.toLowerCase() === key.toLowerCase() ||\n      event.code.replace('Key', '').toLowerCase() === key.toLowerCase())\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function getHotkeyMatcher(hotkey: string): CheckHotkeyMatch {\n  return (event) => isExactHotkey(parseHotkey(hotkey), event);\n}\n\nexport interface HotkeyItemOptions {\n  preventDefault?: boolean;\n}\n\ntype HotkeyItem = [\n  string,\n  (event: React.KeyboardEvent<HTMLElement> | KeyboardEvent) => void,\n  HotkeyItemOptions?,\n];\n\nexport function getHotkeyHandler(hotkeys: HotkeyItem[]) {\n  return (event: React.KeyboardEvent<HTMLElement> | KeyboardEvent) => {\n    const _event = 'nativeEvent' in event ? event.nativeEvent : event;\n    hotkeys.forEach(([hotkey, handler, options = { preventDefault: true }]) => {\n      if (getHotkeyMatcher(hotkey)(_event)) {\n        if (options.preventDefault) {\n          event.preventDefault();\n        }\n\n        handler(_event);\n      }\n    });\n  };\n}\n"],"mappings":";;AACO,SAASA,WAAWA,CAACC,MAAM,EAAE;EAClC,MAAMC,IAAI,GAAGD,MAAM,CAACE,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAE,EAAC;EACvE,MAAMC,SAAS,GAAG;IAChBC,GAAG,EAAEP,IAAI,CAACQ,QAAQ,CAAC,KAAK,CAAC;IACzBC,IAAI,EAAET,IAAI,CAACQ,QAAQ,CAAC,MAAM,CAAC;IAC3BE,IAAI,EAAEV,IAAI,CAACQ,QAAQ,CAAC,MAAM,CAAC;IAC3BG,GAAG,EAAEX,IAAI,CAACQ,QAAQ,CAAC,KAAK,CAAC;IACzBI,KAAK,EAAEZ,IAAI,CAACQ,QAAQ,CAAC,OAAO;EAChC,CAAG;EACD,MAAMK,YAAY,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC;EAC5D,MAAMC,OAAO,GAAGd,IAAI,CAACe,IAAI,CAAEC,GAAG,IAAK,CAACH,YAAY,CAACL,QAAQ,CAACQ,GAAG,CAAC,CAAC;EAC/D,OAAO;IACL,GAAGV,SAAS;IACZU,GAAG,EAAEF;EACT,CAAG;AACH;AACA,SAASG,aAAaA,CAAClB,MAAM,EAAEmB,KAAK,EAAE;EACpC,MAAM;IAAEX,GAAG;IAAEE,IAAI;IAAEC,IAAI;IAAEC,GAAG;IAAEC,KAAK;IAAEI;EAAK,IAAGjB,MAAM;EACnD,MAAM;IAAEoB,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC,QAAQ;IAAEN,GAAG,EAAEO;EAAY,IAAGL,KAAK;EACrE,IAAIX,GAAG,KAAKY,MAAM,EAAE;IAClB,OAAO,KAAK;EACb;EACD,IAAIR,GAAG,EAAE;IACP,IAAI,CAACS,OAAO,IAAI,CAACC,OAAO,EAAE;MACxB,OAAO,KAAK;IACb;EACL,CAAG,MAAM;IACL,IAAIZ,IAAI,KAAKW,OAAO,EAAE;MACpB,OAAO,KAAK;IACb;IACD,IAAIV,IAAI,KAAKW,OAAO,EAAE;MACpB,OAAO,KAAK;IACb;EACF;EACD,IAAIT,KAAK,KAAKU,QAAQ,EAAE;IACtB,OAAO,KAAK;EACb;EACD,IAAIN,GAAG,KAAKO,UAAU,CAACtB,WAAW,EAAE,KAAKe,GAAG,CAACf,WAAW,CAAE,KAAIiB,KAAK,CAACM,IAAI,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACxB,WAAW,CAAE,MAAKe,GAAG,CAACf,WAAW,EAAE,CAAC,EAAE;IAChI,OAAO,IAAI;EACZ;EACD,OAAO,KAAK;AACd;AACO,SAASyB,gBAAgBA,CAAC3B,MAAM,EAAE;EACvC,OAAQmB,KAAK,IAAKD,aAAa,CAACnB,WAAW,CAACC,MAAM,CAAC,EAAEmB,KAAK,CAAC;AAC7D;AACO,SAASS,gBAAgBA,CAACC,OAAO,EAAE;EACxC,OAAQV,KAAK,IAAK;IAChB,MAAMW,MAAM,GAAG,aAAa,IAAIX,KAAK,GAAGA,KAAK,CAACY,WAAW,GAAGZ,KAAK;IACjEU,OAAO,CAACG,OAAO,CAAC,CAAC,CAAChC,MAAM,EAAEiC,OAAO,EAAEC,OAAO,GAAG;MAAEC,cAAc,EAAE;IAAI,CAAE,CAAC,KAAK;MACzE,IAAIR,gBAAgB,CAAC3B,MAAM,CAAC,CAAC8B,MAAM,CAAC,EAAE;QACpC,IAAII,OAAO,CAACC,cAAc,EAAE;UAC1BhB,KAAK,CAACgB,cAAc,EAAE;QACvB;QACDF,OAAO,CAACH,MAAM,CAAC;MAChB;IACP,CAAK,CAAC;EACN,CAAG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}