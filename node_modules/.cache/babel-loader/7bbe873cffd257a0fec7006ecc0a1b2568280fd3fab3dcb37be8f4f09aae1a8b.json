{"ast":null,"code":"'use client';\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event.mjs';\nfunction getConnection() {\n  if (typeof navigator === \"undefined\") {\n    return {};\n  }\n  const _navigator = navigator;\n  const connection = _navigator.connection || _navigator.mozConnection || _navigator.webkitConnection;\n  if (!connection) {\n    return {};\n  }\n  return {\n    downlink: connection?.downlink,\n    downlinkMax: connection?.downlinkMax,\n    effectiveType: connection?.effectiveType,\n    rtt: connection?.rtt,\n    saveData: connection?.saveData,\n    type: connection?.type\n  };\n}\nfunction useNetwork() {\n  const [status, setStatus] = useState({\n    online: true\n  });\n  const handleConnectionChange = useCallback(() => setStatus(current => ({\n    ...current,\n    ...getConnection()\n  })), []);\n  useWindowEvent(\"online\", () => setStatus({\n    online: true,\n    ...getConnection()\n  }));\n  useWindowEvent(\"offline\", () => setStatus({\n    online: false,\n    ...getConnection()\n  }));\n  useEffect(() => {\n    const _navigator = navigator;\n    if (_navigator.connection) {\n      setStatus({\n        online: _navigator.onLine,\n        ...getConnection()\n      });\n      _navigator.connection.addEventListener(\"change\", handleConnectionChange);\n      return () => _navigator.connection.removeEventListener(\"change\", handleConnectionChange);\n    }\n    return void 0;\n  }, []);\n  return status;\n}\nexport { useNetwork };","map":{"version":3,"names":["getConnection","navigator","_navigator","connection","mozConnection","webkitConnection","downlink","downlinkMax","effectiveType","rtt","saveData","type","useNetwork","status","setStatus","useState","online","handleConnectionChange","useCallback","current","useWindowEvent","useEffect","onLine","addEventListener","removeEventListener"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/hooks/src/use-network/use-network.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event';\n\ninterface NetworkStatus {\n  downlink?: number;\n  downlinkMax?: number;\n  effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n  rtt?: number;\n  saveData?: boolean;\n  type?: 'bluetooth' | 'cellular' | 'ethernet' | 'wifi' | 'wimax' | 'none' | 'other' | 'unknown';\n}\n\nfunction getConnection(): NetworkStatus {\n  if (typeof navigator === 'undefined') {\n    return {};\n  }\n\n  const _navigator = navigator as any;\n  const connection: any =\n    _navigator.connection || _navigator.mozConnection || _navigator.webkitConnection;\n\n  if (!connection) {\n    return {};\n  }\n\n  return {\n    downlink: connection?.downlink,\n    downlinkMax: connection?.downlinkMax,\n    effectiveType: connection?.effectiveType,\n    rtt: connection?.rtt,\n    saveData: connection?.saveData,\n    type: connection?.type,\n  };\n}\n\nexport function useNetwork() {\n  const [status, setStatus] = useState<{ online: boolean } & NetworkStatus>({\n    online: true,\n  });\n  const handleConnectionChange = useCallback(\n    () => setStatus((current) => ({ ...current, ...getConnection() })),\n    []\n  );\n\n  useWindowEvent('online', () => setStatus({ online: true, ...getConnection() }));\n  useWindowEvent('offline', () => setStatus({ online: false, ...getConnection() }));\n\n  useEffect(() => {\n    const _navigator = navigator as any;\n\n    if (_navigator.connection) {\n      setStatus({ online: _navigator.onLine, ...getConnection() });\n      _navigator.connection.addEventListener('change', handleConnectionChange);\n      return () => _navigator.connection.removeEventListener('change', handleConnectionChange);\n    }\n\n    return undefined;\n  }, []);\n\n  return status;\n}\n"],"mappings":";;;;AAGA,SAASA,aAAaA,CAAA,EAAG;EACvB,IAAI,OAAOC,SAAS,KAAK,WAAW,EAAE;IACpC,OAAO,EAAE;EACV;EACD,MAAMC,UAAU,GAAGD,SAAS;EAC5B,MAAME,UAAU,GAAGD,UAAU,CAACC,UAAU,IAAID,UAAU,CAACE,aAAa,IAAIF,UAAU,CAACG,gBAAgB;EACnG,IAAI,CAACF,UAAU,EAAE;IACf,OAAO,EAAE;EACV;EACD,OAAO;IACLG,QAAQ,EAAEH,UAAU,EAAEG,QAAQ;IAC9BC,WAAW,EAAEJ,UAAU,EAAEI,WAAW;IACpCC,aAAa,EAAEL,UAAU,EAAEK,aAAa;IACxCC,GAAG,EAAEN,UAAU,EAAEM,GAAG;IACpBC,QAAQ,EAAEP,UAAU,EAAEO,QAAQ;IAC9BC,IAAI,EAAER,UAAU,EAAEQ;EACtB,CAAG;AACH;AACO,SAASC,UAAUA,CAAA,EAAG;EAC3B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGC,QAAQ,CAAC;IACnCC,MAAM,EAAE;EACZ,CAAG,CAAC;EACF,MAAMC,sBAAsB,GAAGC,WAAW,CACxC,MAAMJ,SAAS,CAAEK,OAAO,KAAM;IAAE,GAAGA,OAAO;IAAE,GAAGnB,aAAa,CAAE;EAAA,CAAE,CAAC,CAAC,EAClE,EACJ,CAAG;EACDoB,cAAc,CAAC,QAAQ,EAAE,MAAMN,SAAS,CAAC;IAAEE,MAAM,EAAE,IAAI;IAAE,GAAGhB,aAAa;EAAI,EAAC,CAAC;EAC/EoB,cAAc,CAAC,SAAS,EAAE,MAAMN,SAAS,CAAC;IAAEE,MAAM,EAAE,KAAK;IAAE,GAAGhB,aAAa;EAAI,EAAC,CAAC;EACjFqB,SAAS,CAAC,MAAM;IACd,MAAMnB,UAAU,GAAGD,SAAS;IAC5B,IAAIC,UAAU,CAACC,UAAU,EAAE;MACzBW,SAAS,CAAC;QAAEE,MAAM,EAAEd,UAAU,CAACoB,MAAM;QAAE,GAAGtB,aAAa,CAAE;MAAA,CAAE,CAAC;MAC5DE,UAAU,CAACC,UAAU,CAACoB,gBAAgB,CAAC,QAAQ,EAAEN,sBAAsB,CAAC;MACxE,OAAO,MAAMf,UAAU,CAACC,UAAU,CAACqB,mBAAmB,CAAC,QAAQ,EAAEP,sBAAsB,CAAC;IACzF;IACD,OAAO,KAAK,CAAC;EACd,GAAE,EAAE,CAAC;EACN,OAAOJ,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}