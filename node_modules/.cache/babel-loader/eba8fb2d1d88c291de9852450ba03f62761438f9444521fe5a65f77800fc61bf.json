{"ast":null,"code":"'use client';\n\nfunction joiResolver(schema, options) {\n  const _schema = schema;\n  return values => {\n    const parsed = _schema.validate(values, {\n      abortEarly: false,\n      ...options\n    });\n    if (!parsed.error) {\n      return {};\n    }\n    const results = {};\n    parsed.error.details.forEach(error => {\n      results[error.path.join(\".\")] = error.message;\n    });\n    return results;\n  };\n}\nexport { joiResolver };","map":{"version":3,"names":["joiResolver","schema","options","_schema","values","parsed","validate","abortEarly","error","results","details","forEach","path","join","message"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/form/src/resolvers/joi-resolver/joi-resolver.ts"],"sourcesContent":["import type { FormErrors } from '../../types';\n\ninterface JoiError {\n  path: (string | number)[];\n  message: string;\n}\n\ninterface JoiResults {\n  success: boolean;\n  error: {\n    details: JoiError[];\n  };\n}\n\ninterface JoiSchema {\n  validate: (values: Record<string, any>, options: { abortEarly: boolean }) => JoiResults;\n}\n\nexport function joiResolver(schema: any, options?: any) {\n  const _schema: JoiSchema = schema;\n  return (values: Record<string, any>): FormErrors => {\n    const parsed = _schema.validate(values, { abortEarly: false, ...options });\n\n    if (!parsed.error) {\n      return {};\n    }\n\n    const results: Record<string, any> = {};\n    parsed.error.details.forEach((error) => {\n      results[error.path.join('.')] = error.message;\n    });\n\n    return results;\n  };\n}\n"],"mappings":";;AACO,SAASA,WAAWA,CAACC,MAAM,EAAEC,OAAO,EAAE;EAC3C,MAAMC,OAAO,GAAGF,MAAM;EACtB,OAAQG,MAAM,IAAK;IACjB,MAAMC,MAAM,GAAGF,OAAO,CAACG,QAAQ,CAACF,MAAM,EAAE;MAAEG,UAAU,EAAE,KAAK;MAAE,GAAGL;IAAO,CAAE,CAAC;IAC1E,IAAI,CAACG,MAAM,CAACG,KAAK,EAAE;MACjB,OAAO,EAAE;IACV;IACD,MAAMC,OAAO,GAAG,EAAE;IAClBJ,MAAM,CAACG,KAAK,CAACE,OAAO,CAACC,OAAO,CAAEH,KAAK,IAAK;MACtCC,OAAO,CAACD,KAAK,CAACI,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAGL,KAAK,CAACM,OAAO;IACnD,CAAK,CAAC;IACF,OAAOL,OAAO;EAClB,CAAG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}