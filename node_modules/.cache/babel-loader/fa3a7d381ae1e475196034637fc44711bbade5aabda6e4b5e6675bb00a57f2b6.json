{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '@mantine/hooks';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport classes from './Code.module.css.mjs';\nconst defaultProps = {};\nconst varsResolver = createVarsResolver((theme, {\n  color\n}) => ({\n  root: {\n    \"--code-bg\": color ? getThemeColor(color, theme) : void 0\n  }\n}));\nconst Code = factory((_props, ref) => {\n  const props = useProps(\"Code\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    color,\n    block,\n    variant,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Code\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */React.createElement(Box, {\n    component: block ? \"pre\" : \"code\",\n    variant,\n    ref,\n    mod: [{\n      block\n    }, mod],\n    ...getStyles(\"root\"),\n    ...others,\n    dir: \"ltr\"\n  });\n});\nCode.classes = classes;\nCode.displayName = \"@mantine/core/Code\";\nexport { Code };","map":{"version":3,"names":["defaultProps","varsResolver","createVarsResolver","theme","color","root","getThemeColor","Code","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","block","variant","mod","others","getStyles","useStyles","name","classes","React","createElement","Box","component","dir","displayName"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/components/Code/Code.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Code.module.css';\n\nexport type CodeStylesNames = 'root';\nexport type CodeCssVariables = {\n  root: '--code-bg';\n};\n\nexport interface CodeProps extends BoxProps, StylesApiProps<CodeFactory>, ElementProps<'code'> {\n  /** Key of `theme.colors` or any valid CSS color, controls `background-color` of the code, by default value is calculated based on color scheme */\n  color?: MantineColor;\n\n  /** If set code will be rendered inside `pre`, `false` by default */\n  block?: boolean;\n}\n\nexport type CodeFactory = Factory<{\n  props: CodeProps;\n  ref: HTMLElement;\n  stylesNames: CodeStylesNames;\n  vars: CodeCssVariables;\n}>;\n\nconst defaultProps: Partial<CodeProps> = {};\n\nconst varsResolver = createVarsResolver<CodeFactory>((theme, { color }) => ({\n  root: {\n    '--code-bg': color ? getThemeColor(color, theme) : undefined,\n  },\n}));\n\nexport const Code = factory<CodeFactory>((_props, ref) => {\n  const props = useProps('Code', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    color,\n    block,\n    variant,\n    mod,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<CodeFactory>({\n    name: 'Code',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box<any>\n      component={block ? 'pre' : 'code'}\n      variant={variant}\n      ref={ref}\n      mod={[{ block }, mod]}\n      {...getStyles('root')}\n      {...others}\n      dir=\"ltr\"\n    />\n  );\n});\n\nCode.classes = classes;\nCode.displayName = '@mantine/core/Code';\n"],"mappings":";;;;;;;;;;;;;;;;;AAWA,MAAMA,YAAY,GAAG,EAAE;AACvB,MAAMC,YAAY,GAAGC,kBAAkB,CAAC,CAACC,KAAK,EAAE;EAAEC;AAAK,CAAE,MAAM;EAC7DC,IAAI,EAAE;IACJ,WAAW,EAAED,KAAK,GAAGE,aAAa,CAACF,KAAK,EAAED,KAAK,CAAC,GAAG,KAAK;EACzD;AACH,CAAC,CAAC,CAAC;AACS,MAACI,IAAI,GAAGC,OAAO,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;EAC3C,MAAMC,KAAK,GAAGC,QAAQ,CAAC,MAAM,EAAEZ,YAAY,EAAES,MAAM,CAAC;EACpD,MAAM;IACJI,UAAU;IACVC,SAAS;IACTC,KAAK;IACLC,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJd,KAAK;IACLe,KAAK;IACLC,OAAO;IACPC,GAAG;IACH,GAAGC;EACJ,IAAGX,KAAK;EACT,MAAMY,SAAS,GAAGC,SAAS,CAAC;IAC1BC,IAAI,EAAE,MAAM;IACZd,KAAK;IACLe,OAAO;IACPZ,SAAS;IACTC,KAAK;IACLF,UAAU;IACVG,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJjB;EACJ,CAAG,CAAC;EACF,sBAAuB0B,KAAK,CAACC,aAAa,CACxCC,GAAG,EACH;IACEC,SAAS,EAAEX,KAAK,GAAG,KAAK,GAAG,MAAM;IACjCC,OAAO;IACPV,GAAG;IACHW,GAAG,EAAE,CAAC;MAAEF;IAAO,GAAEE,GAAG,CAAC;IACrB,GAAGE,SAAS,CAAC,MAAM,CAAC;IACpB,GAAGD,MAAM;IACTS,GAAG,EAAE;EACN,CACL,CAAG;AACH,CAAC,CAAE;AACHxB,IAAI,CAACmB,OAAO,GAAGA,OAAO;AACtBnB,IAAI,CAACyB,WAAW,GAAG,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}