{"ast":null,"code":"'use client';\n\nimport React, { useState, useRef } from 'react';\nimport { useMove, useDidUpdate, useMergedRef, clampUseMovePosition } from '@mantine/hooks';\nimport { rem } from '../../../core/utils/units-converters/rem.mjs';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useColorPickerContext } from '../ColorPicker.context.mjs';\nimport { Thumb } from '../Thumb/Thumb.mjs';\nimport classes from '../ColorPicker.module.css.mjs';\nconst defaultProps = {};\nconst ColorSlider = factory((_props, ref) => {\n  const props = useProps(\"ColorSlider\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    onChange,\n    onChangeEnd,\n    maxValue,\n    round,\n    size = \"md\",\n    focusable = true,\n    value,\n    overlays,\n    thumbColor = \"transparent\",\n    onScrubStart,\n    onScrubEnd,\n    __staticSelector = \"ColorPicker\",\n    ...others\n  } = props;\n  const _getStyles = useStyles({\n    name: __staticSelector,\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled\n  });\n  const ctxGetStyles = useColorPickerContext()?.getStyles;\n  const getStyles = ctxGetStyles || _getStyles;\n  const theme = useMantineTheme();\n  const [position, setPosition] = useState({\n    y: 0,\n    x: value / maxValue\n  });\n  const positionRef = useRef(position);\n  const getChangeValue = val => round ? Math.round(val * maxValue) : val * maxValue;\n  const {\n    ref: sliderRef\n  } = useMove(({\n    x,\n    y\n  }) => {\n    positionRef.current = {\n      x,\n      y\n    };\n    onChange?.(getChangeValue(x));\n  }, {\n    onScrubEnd: () => {\n      const {\n        x\n      } = positionRef.current;\n      onChangeEnd?.(getChangeValue(x));\n      onScrubEnd?.();\n    },\n    onScrubStart\n  });\n  useDidUpdate(() => {\n    setPosition({\n      y: 0,\n      x: value / maxValue\n    });\n  }, [value]);\n  const handleArrow = (event, pos) => {\n    event.preventDefault();\n    const _position = clampUseMovePosition(pos);\n    onChange?.(getChangeValue(_position.x));\n    onChangeEnd?.(getChangeValue(_position.x));\n  };\n  const handleKeyDown = event => {\n    switch (event.key) {\n      case \"ArrowRight\":\n        {\n          handleArrow(event, {\n            x: position.x + 0.05,\n            y: position.y\n          });\n          break;\n        }\n      case \"ArrowLeft\":\n        {\n          handleArrow(event, {\n            x: position.x - 0.05,\n            y: position.y\n          });\n          break;\n        }\n    }\n  };\n  const layers = overlays.map((overlay, index) => /* @__PURE__ */React.createElement(\"div\", {\n    ...getStyles(\"sliderOverlay\"),\n    style: overlay,\n    key: index\n  }));\n  return /* @__PURE__ */React.createElement(Box, {\n    ...others,\n    ref: useMergedRef(sliderRef, ref),\n    ...getStyles(\"slider\"),\n    role: \"slider\",\n    \"aria-valuenow\": value,\n    \"aria-valuemax\": maxValue,\n    \"aria-valuemin\": 0,\n    tabIndex: focusable ? 0 : -1,\n    onKeyDown: handleKeyDown,\n    \"data-focus-ring\": theme.focusRing,\n    __vars: {\n      \"--_cp-thumb-size\": `var(--cp-thumb-size-${size})`\n    }\n  }, layers, /* @__PURE__ */React.createElement(Thumb, {\n    position,\n    ...getStyles(\"thumb\", {\n      style: {\n        top: rem(1),\n        background: thumbColor\n      }\n    })\n  }));\n});\nColorSlider.displayName = \"@mantine/core/ColorSlider\";\nexport { ColorSlider };","map":{"version":3,"names":["defaultProps","ColorSlider","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","onChange","onChangeEnd","maxValue","round","size","focusable","value","overlays","thumbColor","onScrubStart","onScrubEnd","__staticSelector","others","_getStyles","useStyles","name","classes","ctxGetStyles","useColorPickerContext","getStyles","theme","useMantineTheme","position","setPosition","useState","y","x","positionRef","useRef","getChangeValue","val","Math","sliderRef","useMove","current","useDidUpdate","handleArrow","event","pos","preventDefault","_position","clampUseMovePosition","handleKeyDown","key","layers","map","overlay","index","React","createElement","Box","useMergedRef","role","tabIndex","onKeyDown","focusRing","__vars","Thumb","top","rem","background","displayName"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/components/ColorPicker/ColorSlider/ColorSlider.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport {\n  clampUseMovePosition,\n  useDidUpdate,\n  useMergedRef,\n  useMove,\n  UseMovePosition,\n} from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  MantineSize,\n  rem,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useStyles,\n} from '../../../core';\nimport { useColorPickerContext } from '../ColorPicker.context';\nimport { Thumb } from '../Thumb/Thumb';\nimport classes from '../ColorPicker.module.css';\n\nexport type ColorSliderStylesNames = 'slider' | 'sliderOverlay' | 'thumb';\n\nexport interface __ColorSliderProps extends ElementProps<'div', 'onChange'> {\n  value: number;\n  onChange?: (value: number) => void;\n  onChangeEnd?: (value: number) => void;\n  onScrubStart?: () => void;\n  onScrubEnd?: () => void;\n  size?: MantineSize | (string & {});\n  focusable?: boolean;\n}\n\nexport interface ColorSliderProps\n  extends BoxProps,\n    StylesApiProps<ColorSliderFactory>,\n    __ColorSliderProps,\n    ElementProps<'div', 'onChange'> {\n  __staticSelector?: string;\n  maxValue: number;\n  overlays: React.CSSProperties[];\n  round: boolean;\n  thumbColor?: string;\n}\n\nexport type ColorSliderFactory = Factory<{\n  props: ColorSliderProps;\n  ref: HTMLDivElement;\n  stylesNames: ColorSliderStylesNames;\n}>;\n\nconst defaultProps: Partial<ColorSliderProps> = {};\n\nexport const ColorSlider = factory<ColorSliderFactory>((_props, ref) => {\n  const props = useProps('ColorSlider', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    onChange,\n    onChangeEnd,\n    maxValue,\n    round,\n    size = 'md',\n    focusable = true,\n    value,\n    overlays,\n    thumbColor = 'transparent',\n    onScrubStart,\n    onScrubEnd,\n    __staticSelector = 'ColorPicker',\n    ...others\n  } = props;\n\n  const _getStyles = useStyles<ColorSliderFactory>({\n    name: __staticSelector,\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  const ctxGetStyles = useColorPickerContext()?.getStyles;\n  const getStyles = ctxGetStyles || _getStyles;\n\n  const theme = useMantineTheme();\n  const [position, setPosition] = useState({ y: 0, x: value / maxValue });\n  const positionRef = useRef(position);\n  const getChangeValue = (val: number) => (round ? Math.round(val * maxValue) : val * maxValue);\n  const { ref: sliderRef } = useMove(\n    ({ x, y }) => {\n      positionRef.current = { x, y };\n      onChange?.(getChangeValue(x));\n    },\n    {\n      onScrubEnd: () => {\n        const { x } = positionRef.current;\n        onChangeEnd?.(getChangeValue(x));\n        onScrubEnd?.();\n      },\n      onScrubStart,\n    }\n  );\n\n  useDidUpdate(() => {\n    setPosition({ y: 0, x: value / maxValue });\n  }, [value]);\n\n  const handleArrow = (event: React.KeyboardEvent<HTMLDivElement>, pos: UseMovePosition) => {\n    event.preventDefault();\n    const _position = clampUseMovePosition(pos);\n    onChange?.(getChangeValue(_position.x));\n    onChangeEnd?.(getChangeValue(_position.x));\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    switch (event.key) {\n      case 'ArrowRight': {\n        handleArrow(event, { x: position.x + 0.05, y: position.y });\n        break;\n      }\n\n      case 'ArrowLeft': {\n        handleArrow(event, { x: position.x - 0.05, y: position.y });\n        break;\n      }\n    }\n  };\n\n  const layers = overlays.map((overlay, index) => (\n    <div {...getStyles('sliderOverlay')} style={overlay} key={index} />\n  ));\n\n  return (\n    <Box\n      {...others}\n      ref={useMergedRef(sliderRef, ref)}\n      {...getStyles('slider')}\n      role=\"slider\"\n      aria-valuenow={value}\n      aria-valuemax={maxValue}\n      aria-valuemin={0}\n      tabIndex={focusable ? 0 : -1}\n      onKeyDown={handleKeyDown}\n      data-focus-ring={theme.focusRing}\n      __vars={{\n        '--_cp-thumb-size': `var(--cp-thumb-size-${size})`,\n      }}\n    >\n      {layers}\n\n      <Thumb\n        position={position}\n        {...getStyles('thumb', { style: { top: rem(1), background: thumbColor } })}\n      />\n    </Box>\n  );\n});\n\nColorSlider.displayName = '@mantine/core/ColorSlider';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}