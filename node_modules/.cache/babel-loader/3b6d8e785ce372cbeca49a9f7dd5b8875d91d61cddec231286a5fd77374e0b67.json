{"ast":null,"code":"// server.js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst app = express();\nconst PORT = process.env.PORT || 5000;\napp.use(cors());\napp.use(express.json());\nconst mongoURI = 'mongodb+srv://pompom.d2oeze8.mongodb.net/';\nmongoose.connect(mongoURI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nconst userSchema = new mongoose.Schema({\n  username: String,\n  password: String\n});\nconst User = mongoose.model('User', userSchema);\napp.post('/api/register', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  console.log('Received registration request:', {\n    username,\n    password\n  });\n  try {\n    const existingUser = await User.findOne({\n      username\n    });\n    if (existingUser) {\n      return res.status(400).json({\n        message: 'Username already exists'\n      });\n    }\n\n    // Note: In a real-world scenario, you should hash and salt the password here\n    const newUser = new User({\n      username,\n      password // Store the plain-text password (not recommended in production)\n    });\n    await newUser.save();\n    res.status(201).json({\n      message: 'User registered successfully'\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      message: 'Internal Server Error'\n    });\n  }\n});\n\n// ... (existing code)\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","mongoose","cors","app","PORT","process","env","use","json","mongoURI","connect","useNewUrlParser","useUnifiedTopology","userSchema","Schema","username","String","password","User","model","post","req","res","body","console","log","existingUser","findOne","status","message","newUser","save","error","listen"],"sources":["/Users/virounikamina/pompom/src/LoginInput.js"],"sourcesContent":["// server.js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\napp.use(cors());\napp.use(express.json());\n\nconst mongoURI = 'mongodb+srv://pompom.d2oeze8.mongodb.net/';\nmongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true });\n\nconst userSchema = new mongoose.Schema({\n  username: String,\n  password: String,\n});\n\nconst User = mongoose.model('User', userSchema);\n\napp.post('/api/register', async (req, res) => {\n  const { username, password } = req.body;\n\n  console.log('Received registration request:', { username, password });\n\n  try {\n    const existingUser = await User.findOne({ username });\n    if (existingUser) {\n      return res.status(400).json({ message: 'Username already exists' });\n    }\n\n    // Note: In a real-world scenario, you should hash and salt the password here\n    const newUser = new User({\n      username,\n      password, // Store the plain-text password (not recommended in production)\n    });\n\n    await newUser.save();\n    res.status(201).json({ message: 'User registered successfully' });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Internal Server Error' });\n  }\n});\n\n// ... (existing code)\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AAErCD,GAAG,CAACI,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC;AACfC,GAAG,CAACI,GAAG,CAACR,OAAO,CAACS,IAAI,CAAC,CAAC,CAAC;AAEvB,MAAMC,QAAQ,GAAG,2CAA2C;AAC5DR,QAAQ,CAACS,OAAO,CAACD,QAAQ,EAAE;EAAEE,eAAe,EAAE,IAAI;EAAEC,kBAAkB,EAAE;AAAK,CAAC,CAAC;AAE/E,MAAMC,UAAU,GAAG,IAAIZ,QAAQ,CAACa,MAAM,CAAC;EACrCC,QAAQ,EAAEC,MAAM;EAChBC,QAAQ,EAAED;AACZ,CAAC,CAAC;AAEF,MAAME,IAAI,GAAGjB,QAAQ,CAACkB,KAAK,CAAC,MAAM,EAAEN,UAAU,CAAC;AAE/CV,GAAG,CAACiB,IAAI,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC5C,MAAM;IAAEP,QAAQ;IAAEE;EAAS,CAAC,GAAGI,GAAG,CAACE,IAAI;EAEvCC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE;IAAEV,QAAQ;IAAEE;EAAS,CAAC,CAAC;EAErE,IAAI;IACF,MAAMS,YAAY,GAAG,MAAMR,IAAI,CAACS,OAAO,CAAC;MAAEZ;IAAS,CAAC,CAAC;IACrD,IAAIW,YAAY,EAAE;MAChB,OAAOJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACpB,IAAI,CAAC;QAAEqB,OAAO,EAAE;MAA0B,CAAC,CAAC;IACrE;;IAEA;IACA,MAAMC,OAAO,GAAG,IAAIZ,IAAI,CAAC;MACvBH,QAAQ;MACRE,QAAQ,CAAE;IACZ,CAAC,CAAC;IAEF,MAAMa,OAAO,CAACC,IAAI,CAAC,CAAC;IACpBT,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACpB,IAAI,CAAC;MAAEqB,OAAO,EAAE;IAA+B,CAAC,CAAC;EACnE,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdR,OAAO,CAACQ,KAAK,CAACA,KAAK,CAAC;IACpBV,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACpB,IAAI,CAAC;MAAEqB,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC5D;AACF,CAAC,CAAC;;AAEF;;AAEA1B,GAAG,CAAC8B,MAAM,CAAC7B,IAAI,EAAE,MAAM;EACrBoB,OAAO,CAACC,GAAG,CAAE,6BAA4BrB,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}