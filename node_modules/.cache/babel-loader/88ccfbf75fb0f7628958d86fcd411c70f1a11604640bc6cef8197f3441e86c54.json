{"ast":null,"code":"function scaleRem(remValue) {\n  return `calc(${remValue} * var(--mantine-scale))`;\n}\nfunction createConverter(units, {\n  shouldScale = false\n} = {}) {\n  function converter(value) {\n    if (value === 0 || value === \"0\") {\n      return `0${units}`;\n    }\n    if (typeof value === \"number\") {\n      const val = `${value / 16}${units}`;\n      return shouldScale ? scaleRem(val) : val;\n    }\n    if (typeof value === \"string\") {\n      if (value.startsWith(\"calc(\") || value.startsWith(\"var(\") || value.startsWith(\"clamp(\")) {\n        return value;\n      }\n      if (value.includes(\" \")) {\n        return value.split(\" \").map(val => converter(val)).join(\" \");\n      }\n      if (value.includes(units)) {\n        return shouldScale ? scaleRem(value) : value;\n      }\n      const replaced = value.replace(\"px\", \"\");\n      if (!Number.isNaN(Number(replaced))) {\n        const val = `${Number(replaced) / 16}${units}`;\n        return shouldScale ? scaleRem(val) : val;\n      }\n    }\n    return value;\n  }\n  return converter;\n}\nconst rem = createConverter(\"rem\", {\n  shouldScale: true\n});\nconst em = createConverter(\"em\");\nexport { em, rem };","map":{"version":3,"names":["scaleRem","remValue","createConverter","units","shouldScale","converter","value","val","startsWith","includes","split","map","join","replaced","replace","Number","isNaN","rem","em"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/core/utils/units-converters/rem.ts"],"sourcesContent":["function scaleRem(remValue: string) {\n  return `calc(${remValue} * var(--mantine-scale))`;\n}\n\nfunction createConverter(units: string, { shouldScale = false } = {}) {\n  function converter(value: unknown): string {\n    if (value === 0 || value === '0') {\n      return `0${units}`;\n    }\n\n    if (typeof value === 'number') {\n      const val = `${value / 16}${units}`;\n      return shouldScale ? scaleRem(val) : val;\n    }\n\n    if (typeof value === 'string') {\n      if (value.startsWith('calc(') || value.startsWith('var(') || value.startsWith('clamp(')) {\n        return value;\n      }\n\n      if (value.includes(' ')) {\n        return value\n          .split(' ')\n          .map((val) => converter(val))\n          .join(' ');\n      }\n\n      if (value.includes(units)) {\n        return shouldScale ? scaleRem(value) : value;\n      }\n\n      const replaced = value.replace('px', '');\n      if (!Number.isNaN(Number(replaced))) {\n        const val = `${Number(replaced) / 16}${units}`;\n        return shouldScale ? scaleRem(val) : val;\n      }\n    }\n\n    return value as string;\n  }\n\n  return converter;\n}\n\nexport const rem = createConverter('rem', { shouldScale: true });\nexport const em = createConverter('em');\n"],"mappings":"AACA,SAASA,QAAQA,CAACC,QAAQ,EAAE;EAC1B,OAAQ,QAAOA,QAAS,0BAAyB;AACnD;AACA,SAASC,eAAeA,CAACC,KAAK,EAAE;EAAEC,WAAW,GAAG;AAAK,CAAE,GAAG,EAAE,EAAE;EAC5D,SAASC,SAASA,CAACC,KAAK,EAAE;IACxB,IAAIA,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,GAAG,EAAE;MAChC,OAAQ,IAAGH,KAAM,EAAC;IACxB;IACI,IAAI,OAAOG,KAAK,KAAK,QAAQ,EAAE;MAC7B,MAAMC,GAAG,GAAI,GAAED,KAAK,GAAG,EAAG,GAAEH,KAAM,EAAC;MACnC,OAAOC,WAAW,GAAGJ,QAAQ,CAACO,GAAG,CAAC,GAAGA,GAAG;IAC9C;IACI,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;MAC7B,IAAIA,KAAK,CAACE,UAAU,CAAC,OAAO,CAAC,IAAIF,KAAK,CAACE,UAAU,CAAC,MAAM,CAAC,IAAIF,KAAK,CAACE,UAAU,CAAC,QAAQ,CAAC,EAAE;QACvF,OAAOF,KAAK;MACpB;MACM,IAAIA,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;QACvB,OAAOH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEJ,GAAG,IAAKF,SAAS,CAACE,GAAG,CAAC,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC;MACtE;MACM,IAAIN,KAAK,CAACG,QAAQ,CAACN,KAAK,CAAC,EAAE;QACzB,OAAOC,WAAW,GAAGJ,QAAQ,CAACM,KAAK,CAAC,GAAGA,KAAK;MACpD;MACM,MAAMO,QAAQ,GAAGP,KAAK,CAACQ,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;MACxC,IAAI,CAACC,MAAM,CAACC,KAAK,CAACD,MAAM,CAACF,QAAQ,CAAC,CAAC,EAAE;QACnC,MAAMN,GAAG,GAAI,GAAEQ,MAAM,CAACF,QAAQ,CAAC,GAAG,EAAG,GAAEV,KAAM,EAAC;QAC9C,OAAOC,WAAW,GAAGJ,QAAQ,CAACO,GAAG,CAAC,GAAGA,GAAG;MAChD;IACA;IACI,OAAOD,KAAK;EAChB;EACE,OAAOD,SAAS;AAClB;AACY,MAACY,GAAG,GAAGf,eAAe,CAAC,KAAK,EAAE;EAAEE,WAAW,EAAE;AAAI,CAAE;AACnD,MAACc,EAAE,GAAGhB,eAAe,CAAC,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}