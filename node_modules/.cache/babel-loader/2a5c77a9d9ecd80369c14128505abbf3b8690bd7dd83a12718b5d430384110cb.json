{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport 'clsx';\nimport '@mantine/hooks';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useTableContext } from './Table.context.mjs';\nimport classes from './Table.module.css.mjs';\nfunction getDataAttributes(ctx, options) {\n  if (!options) {\n    return void 0;\n  }\n  const data = {};\n  if (options.columnBorder && ctx.withColumnBorders) {\n    data[\"data-with-column-border\"] = true;\n  }\n  if (options.rowBorder && ctx.withRowBorders) {\n    data[\"data-with-row-border\"] = true;\n  }\n  if (options.striped && ctx.striped) {\n    data[\"data-striped\"] = ctx.striped;\n  }\n  if (options.highlightOnHover && ctx.highlightOnHover) {\n    data[\"data-hover\"] = true;\n  }\n  if (options.captionSide && ctx.captionSide) {\n    data[\"data-side\"] = ctx.captionSide;\n  }\n  if (options.stickyHeader && ctx.stickyHeader) {\n    data[\"data-sticky\"] = true;\n  }\n  return data;\n}\nfunction tableElement(element, options) {\n  const name = `Table${element.charAt(0).toUpperCase()}${element.slice(1)}`;\n  const Component = factory((_props, ref) => {\n    const props = useProps(name, {}, _props);\n    const {\n      classNames,\n      className,\n      style,\n      styles,\n      ...others\n    } = props;\n    const ctx = useTableContext();\n    return /* @__PURE__ */React.createElement(Box, {\n      component: element,\n      ref,\n      ...getDataAttributes(ctx, options),\n      ...ctx.getStyles(element, {\n        className,\n        classNames,\n        style,\n        styles,\n        props\n      }),\n      ...others\n    });\n  });\n  Component.displayName = `@mantine/core/${name}`;\n  Component.classes = classes;\n  return Component;\n}\nconst TableTh = tableElement(\"th\", {\n  columnBorder: true\n});\nconst TableTd = tableElement(\"td\", {\n  columnBorder: true\n});\nconst TableTr = tableElement(\"tr\", {\n  rowBorder: true,\n  striped: true,\n  highlightOnHover: true\n});\nconst TableThead = tableElement(\"thead\", {\n  stickyHeader: true\n});\nconst TableTbody = tableElement(\"tbody\");\nconst TableTfoot = tableElement(\"tfoot\");\nconst TableCaption = tableElement(\"caption\", {\n  captionSide: true\n});\nexport { TableCaption, TableTbody, TableTd, TableTfoot, TableTh, TableThead, TableTr, tableElement };","map":{"version":3,"names":["getDataAttributes","ctx","options","data","columnBorder","withColumnBorders","rowBorder","withRowBorders","striped","highlightOnHover","captionSide","stickyHeader","tableElement","element","name","charAt","toUpperCase","slice","Component","factory","_props","ref","props","useProps","classNames","className","style","styles","others","useTableContext","React","createElement","Box","component","getStyles","displayName","classes","TableTh","TableTd","TableTr","TableThead","TableTbody","TableTfoot","TableCaption"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/components/Table/Table.components.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  FactoryPayload,\n  useProps,\n} from '../../core';\nimport type { TableFactory } from './Table';\nimport { TableContextValue, useTableContext } from './Table.context';\nimport classes from './Table.module.css';\n\nexport interface TableElementProps<Selector extends string>\n  extends BoxProps,\n    CompoundStylesApiProps<Omit<TableFactory, 'stylesNames'> & { stylesNames: Selector }> {}\n\nexport interface TableThProps extends TableElementProps<'th'>, ElementProps<'th'> {}\nexport interface TableTdProps extends TableElementProps<'td'>, ElementProps<'td'> {}\nexport interface TableTrProps extends TableElementProps<'tr'>, ElementProps<'tr'> {}\nexport interface TableTheadProps extends TableElementProps<'thead'>, ElementProps<'thead'> {}\nexport interface TableTbodyProps extends TableElementProps<'tbody'>, ElementProps<'tbody'> {}\nexport interface TableTfootProps extends TableElementProps<'tfoot'>, ElementProps<'tfoot'> {}\nexport interface TableCaptionProps extends TableElementProps<'caption'>, ElementProps<'caption'> {}\n\nexport type TableThFactory = Factory<{\n  props: TableThProps;\n  ref: HTMLTableCellElement;\n  stylesNames: 'th';\n  compound: true;\n}>;\n\nexport type TableTdFactory = Factory<{\n  props: TableTdProps;\n  ref: HTMLTableCellElement;\n  stylesNames: 'td';\n  compound: true;\n}>;\n\nexport type TableTrFactory = Factory<{\n  props: TableTrProps;\n  ref: HTMLTableRowElement;\n  stylesNames: 'tr';\n  compound: true;\n}>;\n\nexport type TableTheadFactory = Factory<{\n  props: TableTheadProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'thead';\n  compound: true;\n}>;\n\nexport type TableTbodyFactory = Factory<{\n  props: TableTbodyProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'tbody';\n  compound: true;\n}>;\n\nexport type TableTfootFactory = Factory<{\n  props: TableTfootProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'tfoot';\n  compound: true;\n}>;\n\nexport type TableCaptionFactory = Factory<{\n  props: TableCaptionProps;\n  ref: HTMLTableCaptionElement;\n  stylesNames: 'caption';\n  compound: true;\n}>;\n\ninterface TableElementOptions {\n  columnBorder?: true;\n  rowBorder?: true;\n  striped?: true;\n  highlightOnHover?: true;\n  captionSide?: true;\n  stickyHeader?: true;\n}\n\nfunction getDataAttributes(ctx: TableContextValue, options?: TableElementOptions) {\n  if (!options) {\n    return undefined;\n  }\n\n  const data: Record<string, boolean | string> = {};\n\n  if (options.columnBorder && ctx.withColumnBorders) {\n    data['data-with-column-border'] = true;\n  }\n\n  if (options.rowBorder && ctx.withRowBorders) {\n    data['data-with-row-border'] = true;\n  }\n\n  if (options.striped && ctx.striped) {\n    data['data-striped'] = ctx.striped;\n  }\n\n  if (options.highlightOnHover && ctx.highlightOnHover) {\n    data['data-hover'] = true;\n  }\n\n  if (options.captionSide && ctx.captionSide) {\n    data['data-side'] = ctx.captionSide;\n  }\n\n  if (options.stickyHeader && ctx.stickyHeader) {\n    data['data-sticky'] = true;\n  }\n\n  return data;\n}\n\nexport function tableElement<Factory extends FactoryPayload>(\n  element: 'th' | 'td' | 'tr' | 'thead' | 'tbody' | 'tfoot' | 'caption',\n  options?: TableElementOptions\n) {\n  const name = `Table${element.charAt(0).toUpperCase()}${element.slice(1)}`;\n  const Component = factory<Factory>((_props, ref) => {\n    const props = useProps(name, {}, _props);\n    const { classNames, className, style, styles, ...others } = props;\n\n    const ctx = useTableContext();\n\n    return (\n      <Box\n        component={element}\n        ref={ref}\n        {...getDataAttributes(ctx, options)}\n        {...ctx.getStyles(element, { className, classNames, style, styles, props })}\n        {...others}\n      />\n    );\n  });\n\n  Component.displayName = `@mantine/core/${name}`;\n  Component.classes = classes;\n  return Component;\n}\n\nexport const TableTh = tableElement<TableThFactory>('th', { columnBorder: true });\nexport const TableTd = tableElement<TableTdFactory>('td', { columnBorder: true });\nexport const TableTr = tableElement<TableTrFactory>('tr', {\n  rowBorder: true,\n  striped: true,\n  highlightOnHover: true,\n});\nexport const TableThead = tableElement<TableTheadFactory>('thead', { stickyHeader: true });\nexport const TableTbody = tableElement<TableTbodyFactory>('tbody');\nexport const TableTfoot = tableElement<TableTfootFactory>('tfoot');\nexport const TableCaption = tableElement<TableCaptionFactory>('caption', { captionSide: true });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}