{"ast":null,"code":"'use client';\n\nfunction getCurves({\n  size,\n  thickness,\n  sections,\n  renderRoundedLineCaps,\n  rootColor\n}) {\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves = [];\n  const curvesInOrder = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({\n      sum,\n      offset,\n      data: sections[i],\n      root: false\n    });\n    offset -= sections[i].value / 100 * accumulated;\n  }\n  curves.push({\n    sum,\n    offset,\n    data: {\n      color: rootColor\n    },\n    root: true\n  });\n  curvesInOrder.push({\n    ...curves[curves.length - 1],\n    lineRoundCaps: false\n  });\n  if (curves.length > 2) {\n    curvesInOrder.push({\n      ...curves[0],\n      lineRoundCaps: renderRoundedLineCaps\n    });\n    curvesInOrder.push({\n      ...curves[curves.length - 2],\n      lineRoundCaps: renderRoundedLineCaps\n    });\n    for (let i = 1; i <= curves.length - 3; i += 1) {\n      curvesInOrder.push({\n        ...curves[i],\n        lineRoundCaps: false\n      });\n    }\n  } else {\n    curvesInOrder.push({\n      ...curves[0],\n      lineRoundCaps: renderRoundedLineCaps\n    });\n  }\n  return curvesInOrder;\n}\nexport { getCurves };","map":{"version":3,"names":["getCurves","size","thickness","sections","renderRoundedLineCaps","rootColor","sum","reduce","acc","current","value","accumulated","Math","PI","offset","curves","curvesInOrder","i","length","push","data","root","color","lineRoundCaps"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/components/RingProgress/get-curves/get-curves.ts"],"sourcesContent":["import type { MantineColor } from '../../../core';\n\ninterface CurveData extends React.ComponentPropsWithRef<'circle'> {\n  value: number;\n  color: MantineColor;\n  tooltip?: React.ReactNode;\n}\n\ninterface RootCurveData extends React.ComponentPropsWithRef<'circle'> {\n  color?: MantineColor;\n}\n\ninterface GetCurves {\n  sections: CurveData[];\n  size: number;\n  thickness: number;\n  renderRoundedLineCaps: boolean | undefined;\n  rootColor?: MantineColor;\n}\n\ninterface Curve {\n  sum: number;\n  offset: number;\n  root: boolean;\n  data: CurveData | RootCurveData;\n  lineRoundCaps?: boolean;\n}\n\nexport function getCurves({\n  size,\n  thickness,\n  sections,\n  renderRoundedLineCaps,\n  rootColor,\n}: GetCurves) {\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves: Curve[] = [];\n  const curvesInOrder: Curve[] = [];\n\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({ sum, offset, data: sections[i], root: false });\n    offset -= (sections[i].value / 100) * accumulated;\n  }\n\n  curves.push({ sum, offset, data: { color: rootColor }, root: true });\n\n  // Reorder curves to layer appropriately and selectively set caps to round\n\n  curvesInOrder.push({ ...curves[curves.length - 1], lineRoundCaps: false });\n  if (curves.length > 2) {\n    curvesInOrder.push({ ...curves[0], lineRoundCaps: renderRoundedLineCaps });\n    curvesInOrder.push({ ...curves[curves.length - 2], lineRoundCaps: renderRoundedLineCaps });\n    for (let i = 1; i <= curves.length - 3; i += 1) {\n      curvesInOrder.push({ ...curves[i], lineRoundCaps: false });\n    }\n  } else {\n    curvesInOrder.push({ ...curves[0], lineRoundCaps: renderRoundedLineCaps });\n  }\n\n  return curvesInOrder;\n}\n"],"mappings":";;AACO,SAASA,SAASA,CAAC;EACxBC,IAAI;EACJC,SAAS;EACTC,QAAQ;EACRC,qBAAqB;EACrBC;AACF,CAAC,EAAE;EACD,MAAMC,GAAG,GAAGH,QAAQ,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAKD,GAAG,GAAGC,OAAO,CAACC,KAAK,EAAE,CAAC,CAAC;EACrE,MAAMC,WAAW,GAAGC,IAAI,CAACC,EAAE,IAAI,CAACZ,IAAI,GAAG,GAAG,GAAGC,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;EACpE,IAAIY,MAAM,GAAGH,WAAW;EACxB,MAAMI,MAAM,GAAG,EAAE;EACjB,MAAMC,aAAa,GAAG,EAAE;EACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,QAAQ,CAACe,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC3CF,MAAM,CAACI,IAAI,CAAC;MAAEb,GAAG;MAAEQ,MAAM;MAAEM,IAAI,EAAEjB,QAAQ,CAACc,CAAC,CAAC;MAAEI,IAAI,EAAE;IAAO,EAAC;IAC5DP,MAAM,IAAIX,QAAQ,CAACc,CAAC,CAAC,CAACP,KAAK,GAAG,GAAG,GAAGC,WAAW;EAChD;EACDI,MAAM,CAACI,IAAI,CAAC;IAAEb,GAAG;IAAEQ,MAAM;IAAEM,IAAI,EAAE;MAAEE,KAAK,EAAEjB;IAAW;IAAEgB,IAAI,EAAE;EAAM,EAAC;EACpEL,aAAa,CAACG,IAAI,CAAC;IAAE,GAAGJ,MAAM,CAACA,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC;IAAEK,aAAa,EAAE;EAAK,CAAE,CAAC;EAC1E,IAAIR,MAAM,CAACG,MAAM,GAAG,CAAC,EAAE;IACrBF,aAAa,CAACG,IAAI,CAAC;MAAE,GAAGJ,MAAM,CAAC,CAAC,CAAC;MAAEQ,aAAa,EAAEnB;IAAqB,CAAE,CAAC;IAC1EY,aAAa,CAACG,IAAI,CAAC;MAAE,GAAGJ,MAAM,CAACA,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC;MAAEK,aAAa,EAAEnB;IAAqB,CAAE,CAAC;IAC1F,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,MAAM,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;MAC9CD,aAAa,CAACG,IAAI,CAAC;QAAE,GAAGJ,MAAM,CAACE,CAAC,CAAC;QAAEM,aAAa,EAAE;MAAK,CAAE,CAAC;IAC3D;EACL,CAAG,MAAM;IACLP,aAAa,CAACG,IAAI,CAAC;MAAE,GAAGJ,MAAM,CAAC,CAAC,CAAC;MAAEQ,aAAa,EAAEnB;IAAqB,CAAE,CAAC;EAC3E;EACD,OAAOY,aAAa;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}