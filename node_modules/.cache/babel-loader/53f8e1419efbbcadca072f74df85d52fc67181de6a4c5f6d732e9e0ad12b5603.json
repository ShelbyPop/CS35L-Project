{"ast":null,"code":"'use client';\n\nimport { useRef, useCallback, useEffect } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { getNextIndex, getPreviousIndex, getFirstIndex } from './get-index/get-index.mjs';\nfunction useCombobox({\n  defaultOpened,\n  opened,\n  onOpenedChange,\n  onDropdownClose,\n  onDropdownOpen,\n  loop = true,\n  scrollBehavior = \"instant\"\n} = {}) {\n  const [dropdownOpened, setDropdownOpened] = useUncontrolled({\n    value: opened,\n    defaultValue: defaultOpened,\n    finalValue: false,\n    onChange: onOpenedChange\n  });\n  const listId = useRef(null);\n  const selectedOptionIndex = useRef(-1);\n  const searchRef = useRef(null);\n  const targetRef = useRef(null);\n  const focusSearchTimeout = useRef(-1);\n  const focusTargetTimeout = useRef(-1);\n  const selectedIndexUpdateTimeout = useRef(-1);\n  const openDropdown = useCallback((eventSource = \"unknown\") => {\n    if (!dropdownOpened) {\n      setDropdownOpened(true);\n      onDropdownOpen?.(eventSource);\n    }\n  }, [setDropdownOpened, onDropdownOpen, dropdownOpened]);\n  const closeDropdown = useCallback((eventSource = \"unknown\") => {\n    if (dropdownOpened) {\n      setDropdownOpened(false);\n      onDropdownClose?.(eventSource);\n    }\n  }, [setDropdownOpened, onDropdownClose, dropdownOpened]);\n  const toggleDropdown = useCallback((eventSource = \"unknown\") => {\n    if (dropdownOpened) {\n      closeDropdown(eventSource);\n    } else {\n      openDropdown(eventSource);\n    }\n  }, [closeDropdown, openDropdown, dropdownOpened]);\n  const clearSelectedItem = useCallback(() => {\n    const selected = document.querySelector(`#${listId.current} [data-combobox-selected]`);\n    selected?.removeAttribute(\"data-combobox-selected\");\n    selected?.removeAttribute(\"aria-selected\");\n  }, []);\n  const selectOption = useCallback(index => {\n    const list = document.getElementById(listId.current);\n    const items = list?.querySelectorAll(\"[data-combobox-option]\");\n    if (!items) {\n      return null;\n    }\n    const nextIndex = index >= items.length ? 0 : index < 0 ? items.length - 1 : index;\n    selectedOptionIndex.current = nextIndex;\n    if (items?.[nextIndex] && !items[nextIndex].hasAttribute(\"data-combobox-disabled\")) {\n      clearSelectedItem();\n      items[nextIndex].setAttribute(\"data-combobox-selected\", \"true\");\n      items[nextIndex].setAttribute(\"aria-selected\", \"true\");\n      items[nextIndex].scrollIntoView({\n        block: \"nearest\",\n        behavior: scrollBehavior\n      });\n      return items[nextIndex].id;\n    }\n    return null;\n  }, [scrollBehavior, clearSelectedItem]);\n  const selectActiveOption = useCallback(() => {\n    const activeOption = document.querySelector(`#${listId.current} [data-combobox-active]`);\n    if (activeOption) {\n      const items = document.querySelectorAll(`#${listId.current} [data-combobox-option]`);\n      const index = Array.from(items).findIndex(option => option === activeOption);\n      return selectOption(index);\n    }\n    return selectOption(0);\n  }, [selectOption]);\n  const selectNextOption = useCallback(() => selectOption(getNextIndex(selectedOptionIndex.current, document.querySelectorAll(`#${listId.current} [data-combobox-option]`), loop)), [selectOption, loop]);\n  const selectPreviousOption = useCallback(() => selectOption(getPreviousIndex(selectedOptionIndex.current, document.querySelectorAll(`#${listId.current} [data-combobox-option]`), loop)), [selectOption, loop]);\n  const selectFirstOption = useCallback(() => selectOption(getFirstIndex(document.querySelectorAll(`#${listId.current} [data-combobox-option]`))), [selectOption]);\n  const updateSelectedOptionIndex = useCallback((target = \"selected\") => {\n    selectedIndexUpdateTimeout.current = window.setTimeout(() => {\n      const items = document.querySelectorAll(`#${listId.current} [data-combobox-option]`);\n      const index = Array.from(items).findIndex(option => option.hasAttribute(`data-combobox-${target}`));\n      selectedOptionIndex.current = index;\n    }, 0);\n  }, []);\n  const resetSelectedOption = useCallback(() => {\n    selectedOptionIndex.current = -1;\n    clearSelectedItem();\n  }, [clearSelectedItem]);\n  const clickSelectedOption = useCallback(() => {\n    const items = document.querySelectorAll(`#${listId.current} [data-combobox-option]`);\n    const item = items?.[selectedOptionIndex.current];\n    item?.click();\n  }, []);\n  const setListId = useCallback(id => {\n    listId.current = id;\n  }, []);\n  const focusSearchInput = useCallback(() => {\n    focusSearchTimeout.current = window.setTimeout(() => searchRef.current.focus(), 0);\n  }, []);\n  const focusTarget = useCallback(() => {\n    focusTargetTimeout.current = window.setTimeout(() => targetRef.current.focus(), 0);\n  }, []);\n  const getSelectedOptionIndex = useCallback(() => selectedOptionIndex.current, []);\n  useEffect(() => () => {\n    window.clearTimeout(focusSearchTimeout.current);\n    window.clearTimeout(focusTargetTimeout.current);\n    window.clearTimeout(selectedIndexUpdateTimeout.current);\n  }, []);\n  return {\n    dropdownOpened,\n    openDropdown,\n    closeDropdown,\n    toggleDropdown,\n    selectedOptionIndex: selectedOptionIndex.current,\n    getSelectedOptionIndex,\n    selectOption,\n    selectFirstOption,\n    selectActiveOption,\n    selectNextOption,\n    selectPreviousOption,\n    resetSelectedOption,\n    updateSelectedOptionIndex,\n    listId: listId.current,\n    setListId,\n    clickSelectedOption,\n    searchRef,\n    focusSearchInput,\n    targetRef,\n    focusTarget\n  };\n}\nexport { useCombobox };","map":{"version":3,"names":["useCombobox","defaultOpened","opened","onOpenedChange","onDropdownClose","onDropdownOpen","loop","scrollBehavior","dropdownOpened","setDropdownOpened","useUncontrolled","value","defaultValue","finalValue","onChange","listId","useRef","selectedOptionIndex","searchRef","targetRef","focusSearchTimeout","focusTargetTimeout","selectedIndexUpdateTimeout","openDropdown","useCallback","eventSource","closeDropdown","toggleDropdown","clearSelectedItem","selected","document","querySelector","current","removeAttribute","selectOption","index","list","getElementById","items","querySelectorAll","nextIndex","length","hasAttribute","setAttribute","scrollIntoView","block","behavior","id","selectActiveOption","activeOption","Array","from","findIndex","option","selectNextOption","getNextIndex","selectPreviousOption","getPreviousIndex","selectFirstOption","getFirstIndex","updateSelectedOptionIndex","target","window","setTimeout","resetSelectedOption","clickSelectedOption","item","click","setListId","focusSearchInput","focus","focusTarget","getSelectedOptionIndex","useEffect","clearTimeout"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/components/Combobox/use-combobox/use-combobox.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { getFirstIndex, getNextIndex, getPreviousIndex } from './get-index/get-index';\n\nexport type ComboboxDropdownEventSource = 'keyboard' | 'mouse' | 'unknown';\n\nexport interface ComboboxStore {\n  /** Current dropdown opened state */\n  dropdownOpened: boolean;\n\n  /** Opens dropdown */\n  openDropdown: (eventSource?: ComboboxDropdownEventSource) => void;\n\n  /** Closes dropdown */\n  closeDropdown: (eventSource?: ComboboxDropdownEventSource) => void;\n\n  /** Toggles dropdown opened state */\n  toggleDropdown: (eventSource?: ComboboxDropdownEventSource) => void;\n\n  /** Selected option index ref */\n  selectedOptionIndex: number;\n\n  /** Returns currently selected option index or `-1` if none of the options is selected */\n  getSelectedOptionIndex: () => number;\n\n  /** Selects `Combobox.Option` by index */\n  selectOption: (index: number) => void;\n\n  /** Selects first `Combobox.Option` with `active` prop.\n   *  If there are no such options, the function does nothing.\n   */\n  selectActiveOption: () => string | null;\n\n  /** Selects first `Combobox.Option` that is not disabled.\n   *  If there are no such options, the function does nothing.\n   * */\n  selectFirstOption: () => string | null;\n\n  /** Selects next `Combobox.Option` that is not disabled.\n   *  If the current option is the last one, the function selects first option, if `loop` is true.\n   */\n  selectNextOption: () => string | null;\n\n  /** Selects previous `Combobox.Option` that is not disabled.\n   *  If the current option is the first one, the function selects last option, if `loop` is true.\n   * */\n  selectPreviousOption: () => string | null;\n\n  /** Resets selected option index to -1, removes `data-combobox-selected` from selected option */\n  resetSelectedOption: () => void;\n\n  /** Triggers `onClick` event of selected option.\n   *  If there is no selected option, the function does nothing.\n   */\n  clickSelectedOption: () => void;\n\n  /** Updates selected option index to currently selected or active option.\n   *  The function is required to be used with searchable components to update selected option index\n   *  when options list changes based on search query.\n   */\n  updateSelectedOptionIndex: (target?: 'active' | 'selected') => void;\n\n  /** List id, used for `aria-*` attributes */\n  listId: string | null;\n\n  /** Sets list id */\n  setListId: (id: string) => void;\n\n  /** Ref of `Combobox.Search` input */\n  searchRef: React.MutableRefObject<HTMLInputElement | null>;\n\n  /** Moves focus to `Combobox.Search` input */\n  focusSearchInput: () => void;\n\n  /** Ref of the target element */\n  targetRef: React.MutableRefObject<HTMLElement | null>;\n\n  /** Moves focus to the target element */\n  focusTarget: () => void;\n}\n\nexport interface UseComboboxOptions {\n  /** Default value for `dropdownOpened`, `false` by default */\n  defaultOpened?: boolean;\n\n  /** Controlled `dropdownOpened` state */\n  opened?: boolean;\n\n  /** Called when `dropdownOpened` state changes */\n  onOpenedChange?: (opened: boolean) => void;\n\n  /** Called when dropdown closes with event source: keyboard, mouse or unknown */\n  onDropdownClose?: (eventSource: ComboboxDropdownEventSource) => void;\n\n  /** Called when dropdown opens with event source: keyboard, mouse or unknown */\n  onDropdownOpen?: (eventSource: ComboboxDropdownEventSource) => void;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first), `true` by default */\n  loop?: boolean;\n\n  /** `behavior` passed down to `element.scrollIntoView`, `'instant'` by default */\n  scrollBehavior?: ScrollBehavior;\n}\n\nexport function useCombobox({\n  defaultOpened,\n  opened,\n  onOpenedChange,\n  onDropdownClose,\n  onDropdownOpen,\n  loop = true,\n  scrollBehavior = 'instant',\n}: UseComboboxOptions = {}): ComboboxStore {\n  const [dropdownOpened, setDropdownOpened] = useUncontrolled({\n    value: opened,\n    defaultValue: defaultOpened,\n    finalValue: false,\n    onChange: onOpenedChange,\n  });\n\n  const listId = useRef<string | null>(null);\n  const selectedOptionIndex = useRef<number>(-1);\n  const searchRef = useRef<HTMLInputElement | null>(null);\n  const targetRef = useRef<HTMLElement | null>(null);\n  const focusSearchTimeout = useRef<number>(-1);\n  const focusTargetTimeout = useRef<number>(-1);\n  const selectedIndexUpdateTimeout = useRef<number>(-1);\n\n  const openDropdown: ComboboxStore['openDropdown'] = useCallback(\n    (eventSource = 'unknown') => {\n      if (!dropdownOpened) {\n        setDropdownOpened(true);\n        onDropdownOpen?.(eventSource);\n      }\n    },\n    [setDropdownOpened, onDropdownOpen, dropdownOpened]\n  );\n\n  const closeDropdown: ComboboxStore['closeDropdown'] = useCallback(\n    (eventSource = 'unknown') => {\n      if (dropdownOpened) {\n        setDropdownOpened(false);\n        onDropdownClose?.(eventSource);\n      }\n    },\n    [setDropdownOpened, onDropdownClose, dropdownOpened]\n  );\n\n  const toggleDropdown: ComboboxStore['toggleDropdown'] = useCallback(\n    (eventSource = 'unknown') => {\n      if (dropdownOpened) {\n        closeDropdown(eventSource);\n      } else {\n        openDropdown(eventSource);\n      }\n    },\n    [closeDropdown, openDropdown, dropdownOpened]\n  );\n\n  const clearSelectedItem = useCallback(() => {\n    const selected = document.querySelector(`#${listId.current} [data-combobox-selected]`);\n    selected?.removeAttribute('data-combobox-selected');\n    selected?.removeAttribute('aria-selected');\n  }, []);\n\n  const selectOption = useCallback(\n    (index: number) => {\n      const list = document.getElementById(listId.current!);\n      const items = list?.querySelectorAll('[data-combobox-option]');\n\n      if (!items) {\n        return null;\n      }\n\n      const nextIndex = index >= items!.length ? 0 : index < 0 ? items!.length - 1 : index;\n      selectedOptionIndex.current = nextIndex;\n\n      if (items?.[nextIndex] && !items[nextIndex].hasAttribute('data-combobox-disabled')) {\n        clearSelectedItem();\n        items[nextIndex].setAttribute('data-combobox-selected', 'true');\n        items[nextIndex].setAttribute('aria-selected', 'true');\n        items[nextIndex].scrollIntoView({ block: 'nearest', behavior: scrollBehavior });\n        return items[nextIndex].id;\n      }\n\n      return null;\n    },\n    [scrollBehavior, clearSelectedItem]\n  );\n\n  const selectActiveOption = useCallback(() => {\n    const activeOption = document.querySelector<HTMLDivElement>(\n      `#${listId.current} [data-combobox-active]`\n    );\n\n    if (activeOption) {\n      const items = document.querySelectorAll<HTMLDivElement>(\n        `#${listId.current} [data-combobox-option]`\n      );\n      const index = Array.from(items).findIndex((option) => option === activeOption);\n      return selectOption(index);\n    }\n\n    return selectOption(0);\n  }, [selectOption]);\n\n  const selectNextOption = useCallback(\n    () =>\n      selectOption(\n        getNextIndex(\n          selectedOptionIndex.current,\n          document.querySelectorAll<HTMLDivElement>(`#${listId.current} [data-combobox-option]`),\n          loop\n        )\n      ),\n    [selectOption, loop]\n  );\n\n  const selectPreviousOption = useCallback(\n    () =>\n      selectOption(\n        getPreviousIndex(\n          selectedOptionIndex.current,\n          document.querySelectorAll<HTMLDivElement>(`#${listId.current} [data-combobox-option]`),\n          loop\n        )\n      ),\n    [selectOption, loop]\n  );\n\n  const selectFirstOption = useCallback(\n    () =>\n      selectOption(\n        getFirstIndex(\n          document.querySelectorAll<HTMLDivElement>(`#${listId.current} [data-combobox-option]`)\n        )\n      ),\n    [selectOption]\n  );\n\n  const updateSelectedOptionIndex = useCallback((target: 'active' | 'selected' = 'selected') => {\n    selectedIndexUpdateTimeout.current = window.setTimeout(() => {\n      const items = document.querySelectorAll<HTMLDivElement>(\n        `#${listId.current} [data-combobox-option]`\n      );\n      const index = Array.from(items).findIndex((option) =>\n        option.hasAttribute(`data-combobox-${target}`)\n      );\n      selectedOptionIndex.current = index;\n    }, 0);\n  }, []);\n\n  const resetSelectedOption = useCallback(() => {\n    selectedOptionIndex.current = -1;\n    clearSelectedItem();\n  }, [clearSelectedItem]);\n\n  const clickSelectedOption = useCallback(() => {\n    const items = document.querySelectorAll<HTMLDivElement>(\n      `#${listId.current} [data-combobox-option]`\n    );\n    const item = items?.[selectedOptionIndex.current];\n    item?.click();\n  }, []);\n\n  const setListId = useCallback((id: string) => {\n    listId.current = id;\n  }, []);\n\n  const focusSearchInput = useCallback(() => {\n    focusSearchTimeout.current = window.setTimeout(() => searchRef.current!.focus(), 0);\n  }, []);\n\n  const focusTarget = useCallback(() => {\n    focusTargetTimeout.current = window.setTimeout(() => targetRef.current!.focus(), 0);\n  }, []);\n\n  const getSelectedOptionIndex = useCallback(() => selectedOptionIndex.current, []);\n\n  useEffect(\n    () => () => {\n      window.clearTimeout(focusSearchTimeout.current);\n      window.clearTimeout(focusTargetTimeout.current);\n      window.clearTimeout(selectedIndexUpdateTimeout.current);\n    },\n    []\n  );\n\n  return {\n    dropdownOpened,\n    openDropdown,\n    closeDropdown,\n    toggleDropdown,\n\n    selectedOptionIndex: selectedOptionIndex.current,\n    getSelectedOptionIndex,\n    selectOption,\n    selectFirstOption,\n    selectActiveOption,\n    selectNextOption,\n    selectPreviousOption,\n    resetSelectedOption,\n    updateSelectedOptionIndex,\n\n    listId: listId.current,\n    setListId,\n    clickSelectedOption,\n\n    searchRef,\n    focusSearchInput,\n\n    targetRef,\n    focusTarget,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}