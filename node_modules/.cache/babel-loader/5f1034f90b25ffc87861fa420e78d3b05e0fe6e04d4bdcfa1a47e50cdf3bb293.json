{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { getFontSize, getSize, getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport '../Checkbox/Checkbox.mjs';\nimport '../Checkbox/CheckboxGroup/CheckboxGroup.mjs';\nimport { CheckIcon } from '../Checkbox/CheckIcon.mjs';\nimport { useChipGroupContext } from './ChipGroup.context.mjs';\nimport { ChipGroup } from './ChipGroup/ChipGroup.mjs';\nimport classes from './Chip.module.css.mjs';\nconst defaultProps = {\n  type: \"checkbox\"\n};\nconst varsResolver = createVarsResolver((theme, {\n  size,\n  radius,\n  variant,\n  color,\n  autoContrast\n}) => {\n  const colors = theme.variantColorResolver({\n    color: color || theme.primaryColor,\n    theme,\n    variant: variant || \"filled\",\n    autoContrast\n  });\n  return {\n    root: {\n      \"--chip-fz\": getFontSize(size),\n      \"--chip-size\": getSize(size, \"chip-size\"),\n      \"--chip-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--chip-checked-padding\": getSize(size, \"chip-checked-padding\"),\n      \"--chip-padding\": getSize(size, \"chip-padding\"),\n      \"--chip-icon-size\": getSize(size, \"chip-icon-size\"),\n      \"--chip-bg\": color || variant ? colors.background : void 0,\n      \"--chip-hover\": color || variant ? colors.hover : void 0,\n      \"--chip-color\": color || variant ? colors.color : void 0,\n      \"--chip-bd\": color || variant ? colors.border : void 0,\n      \"--chip-spacing\": getSize(size, \"chip-spacing\")\n    }\n  };\n});\nconst Chip = factory((_props, ref) => {\n  const props = useProps(\"Chip\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    id,\n    checked,\n    defaultChecked,\n    onChange,\n    value,\n    wrapperProps,\n    type,\n    disabled,\n    children,\n    size,\n    variant,\n    icon,\n    rootRef,\n    autoContrast,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Chip\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const ctx = useChipGroupContext();\n  const uuid = useId(id);\n  const {\n    styleProps,\n    rest\n  } = extractStyleProps(others);\n  const [_value, setValue] = useUncontrolled({\n    value: checked,\n    defaultValue: defaultChecked,\n    finalValue: false,\n    onChange\n  });\n  const contextProps = ctx ? {\n    checked: ctx.isChipSelected(value),\n    onChange: event => {\n      ctx.onChange(event);\n      onChange?.(event.currentTarget.checked);\n    },\n    type: ctx.multiple ? \"checkbox\" : \"radio\"\n  } : {};\n  const _checked = contextProps.checked || _value;\n  return /* @__PURE__ */React.createElement(Box, {\n    size,\n    variant,\n    ref: rootRef,\n    mod,\n    ...getStyles(\"root\"),\n    ...styleProps,\n    ...wrapperProps\n  }, /* @__PURE__ */React.createElement(\"input\", {\n    type,\n    ...getStyles(\"input\"),\n    checked: _checked,\n    onChange: event => setValue(event.currentTarget.checked),\n    id: uuid,\n    disabled,\n    ref,\n    value,\n    ...contextProps,\n    ...rest\n  }), /* @__PURE__ */React.createElement(\"label\", {\n    htmlFor: uuid,\n    \"data-checked\": _checked || void 0,\n    \"data-disabled\": disabled || void 0,\n    ...getStyles(\"label\", {\n      variant: variant || \"filled\"\n    })\n  }, _checked && /* @__PURE__ */React.createElement(\"span\", {\n    ...getStyles(\"iconWrapper\")\n  }, icon || /* @__PURE__ */React.createElement(CheckIcon, {\n    ...getStyles(\"checkIcon\")\n  })), /* @__PURE__ */React.createElement(\"span\", null, children)));\n});\nChip.classes = classes;\nChip.displayName = \"@mantine/core/Chip\";\nChip.Group = ChipGroup;\nexport { Chip };","map":{"version":3,"names":["defaultProps","type","varsResolver","createVarsResolver","theme","size","radius","variant","color","autoContrast","colors","variantColorResolver","primaryColor","root","getFontSize","getSize","getRadius","background","hover","border","Chip","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","id","checked","defaultChecked","onChange","value","wrapperProps","disabled","children","icon","rootRef","mod","others","getStyles","useStyles","name","classes","ctx","useChipGroupContext","uuid","useId","styleProps","rest","extractStyleProps","_value","setValue","useUncontrolled","defaultValue","finalValue","contextProps","isChipSelected","event","currentTarget","multiple","_checked","React","createElement","Box","htmlFor","CheckIcon","displayName","Group","ChipGroup"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/components/Chip/Chip.tsx"],"sourcesContent":["import React from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  extractStyleProps,\n  factory,\n  Factory,\n  getFontSize,\n  getRadius,\n  getSize,\n  MantineColor,\n  MantineRadius,\n  MantineSize,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { CheckIcon } from '../Checkbox';\nimport { useChipGroupContext } from './ChipGroup.context';\nimport { ChipGroup } from './ChipGroup/ChipGroup';\nimport classes from './Chip.module.css';\n\nexport type ChipStylesNames = 'root' | 'input' | 'iconWrapper' | 'checkIcon' | 'label';\nexport type ChipVariant = 'outline' | 'filled' | 'light';\nexport type ChipCssVariables = {\n  root:\n    | '--chip-fz'\n    | '--chip-size'\n    | '--chip-icon-size'\n    | '--chip-padding'\n    | '--chip-checked-padding'\n    | '--chip-radius'\n    | '--chip-bg'\n    | '--chip-hover'\n    | '--chip-color'\n    | '--chip-bd'\n    | '--chip-spacing';\n};\n\nexport interface ChipProps\n  extends BoxProps,\n    StylesApiProps<ChipFactory>,\n    ElementProps<'input', 'size' | 'onChange'> {\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, `'xl'` by default */\n  radius?: MantineRadius;\n\n  /** Controls various properties related to component size, `'sm'` by default */\n  size?: MantineSize;\n\n  /** Chip input type, `'checkbox'` by default */\n  type?: 'radio' | 'checkbox';\n\n  /** `label` element associated with the input */\n  children: React.ReactNode;\n\n  /** Checked state for controlled component */\n  checked?: boolean;\n\n  /** Default checked state for uncontrolled component */\n  defaultChecked?: boolean;\n\n  /** Calls when checked state changes */\n  onChange?: (checked: boolean) => void;\n\n  /** Controls components colors based on `variant` prop. Key of `theme.colors` or any valid CSS color. `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Static id to connect input with the label, by default `id` is randomly generated */\n  id?: string;\n\n  /** Props passed down to the root element */\n  wrapperProps?: Record<string, any>;\n\n  /** Any element or component to replace default icon */\n  icon?: React.ReactNode;\n\n  /** Assigns ref of the root element */\n  rootRef?: React.ForwardedRef<HTMLDivElement>;\n\n  /** Determines whether button text color with filled variant should depend on `background-color`. If luminosity of the `color` prop is less than `theme.luminosityThreshold`, then `theme.white` will be used for text color, otherwise `theme.black`. Overrides `theme.autoContrast`. */\n  autoContrast?: boolean;\n}\n\nexport type ChipFactory = Factory<{\n  props: ChipProps;\n  ref: HTMLInputElement;\n  stylesNames: ChipStylesNames;\n  vars: ChipCssVariables;\n  variant: ChipVariant;\n  staticComponents: {\n    Group: typeof ChipGroup;\n  };\n}>;\n\nconst defaultProps: Partial<ChipProps> = {\n  type: 'checkbox',\n};\n\nconst varsResolver = createVarsResolver<ChipFactory>(\n  (theme, { size, radius, variant, color, autoContrast }) => {\n    const colors = theme.variantColorResolver({\n      color: color || theme.primaryColor,\n      theme,\n      variant: variant || 'filled',\n      autoContrast,\n    });\n\n    return {\n      root: {\n        '--chip-fz': getFontSize(size),\n        '--chip-size': getSize(size, 'chip-size'),\n        '--chip-radius': radius === undefined ? undefined : getRadius(radius),\n        '--chip-checked-padding': getSize(size, 'chip-checked-padding'),\n        '--chip-padding': getSize(size, 'chip-padding'),\n        '--chip-icon-size': getSize(size, 'chip-icon-size'),\n        '--chip-bg': color || variant ? colors.background : undefined,\n        '--chip-hover': color || variant ? colors.hover : undefined,\n        '--chip-color': color || variant ? colors.color : undefined,\n        '--chip-bd': color || variant ? colors.border : undefined,\n        '--chip-spacing': getSize(size, 'chip-spacing'),\n      },\n    };\n  }\n);\n\nexport const Chip = factory<ChipFactory>((_props, ref) => {\n  const props = useProps('Chip', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    id,\n    checked,\n    defaultChecked,\n    onChange,\n    value,\n    wrapperProps,\n    type,\n    disabled,\n    children,\n    size,\n    variant,\n    icon,\n    rootRef,\n    autoContrast,\n    mod,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<ChipFactory>({\n    name: 'Chip',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const ctx = useChipGroupContext();\n  const uuid = useId(id);\n  const { styleProps, rest } = extractStyleProps(others);\n\n  const [_value, setValue] = useUncontrolled({\n    value: checked,\n    defaultValue: defaultChecked,\n    finalValue: false,\n    onChange,\n  });\n\n  const contextProps = ctx\n    ? {\n        checked: ctx.isChipSelected(value as string),\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n          ctx.onChange(event);\n          onChange?.(event.currentTarget.checked);\n        },\n        type: ctx.multiple ? 'checkbox' : 'radio',\n      }\n    : {};\n\n  const _checked = contextProps.checked || _value;\n\n  return (\n    <Box\n      size={size}\n      variant={variant}\n      ref={rootRef}\n      mod={mod}\n      {...getStyles('root')}\n      {...styleProps}\n      {...wrapperProps}\n    >\n      <input\n        type={type}\n        {...getStyles('input')}\n        checked={_checked}\n        onChange={(event) => setValue(event.currentTarget.checked)}\n        id={uuid}\n        disabled={disabled}\n        ref={ref}\n        value={value}\n        {...contextProps}\n        {...rest}\n      />\n\n      <label\n        htmlFor={uuid}\n        data-checked={_checked || undefined}\n        data-disabled={disabled || undefined}\n        {...getStyles('label', { variant: variant || 'filled' })}\n      >\n        {_checked && (\n          <span {...getStyles('iconWrapper')}>\n            {icon || <CheckIcon {...getStyles('checkIcon')} />}\n          </span>\n        )}\n        <span>{children}</span>\n      </label>\n    </Box>\n  );\n});\n\nChip.classes = classes;\nChip.displayName = '@mantine/core/Chip';\nChip.Group = ChipGroup;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}