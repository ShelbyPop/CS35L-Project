{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { getFontSize, getLineHeight, getSpacing } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '@mantine/hooks';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { ListProvider } from './List.context.mjs';\nimport { ListItem } from './ListItem/ListItem.mjs';\nimport classes from './List.module.css.mjs';\nconst defaultProps = {\n  type: \"unordered\"\n};\nconst varsResolver = createVarsResolver((_, {\n  size,\n  spacing\n}) => ({\n  root: {\n    \"--list-fz\": getFontSize(size),\n    \"--list-lh\": getLineHeight(size),\n    \"--list-spacing\": getSpacing(spacing)\n  }\n}));\nconst List = factory((_props, ref) => {\n  const props = useProps(\"List\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    type,\n    withPadding,\n    icon,\n    spacing,\n    center,\n    listStyleType,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"List\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */React.createElement(ListProvider, {\n    value: {\n      center,\n      icon,\n      getStyles\n    }\n  }, /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"root\", {\n      style: {\n        listStyleType\n      }\n    }),\n    component: type === \"unordered\" ? \"ul\" : \"ol\",\n    mod: [{\n      \"with-padding\": withPadding\n    }, mod],\n    ref,\n    ...others\n  }, children));\n});\nList.classes = classes;\nList.displayName = \"@mantine/core/List\";\nList.Item = ListItem;\nexport { List };","map":{"version":3,"names":["defaultProps","type","varsResolver","createVarsResolver","_","size","spacing","root","getFontSize","getLineHeight","getSpacing","List","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","children","withPadding","icon","center","listStyleType","mod","others","getStyles","useStyles","name","classes","React","createElement","ListProvider","value","Box","component","displayName","Item","ListItem"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/components/List/List.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getFontSize,\n  getLineHeight,\n  getSpacing,\n  MantineSize,\n  MantineSpacing,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { ListProvider } from './List.context';\nimport { ListItem, ListItemStylesNames } from './ListItem/ListItem';\nimport classes from './List.module.css';\n\nexport type ListStylesNames = 'root' | ListItemStylesNames;\nexport type ListCssVariables = {\n  root: '--list-fz' | '--list-lh' | '--list-spacing';\n};\n\nexport interface ListProps\n  extends BoxProps,\n    StylesApiProps<ListFactory>,\n    ElementProps<'ul', 'type'> {\n  /** `List.Item` components only */\n  children?: React.ReactNode;\n\n  /** List type: `ol` or `ul`, `'unordered'` by default */\n  type?: 'ordered' | 'unordered';\n\n  /** Determines whether list items should be offset with padding, `false` by default */\n  withPadding?: boolean;\n\n  /** Controls `font-size` and `line-height`, `'md'` by default */\n  size?: MantineSize;\n\n  /** Icon that replaces list item dot */\n  icon?: React.ReactNode;\n\n  /** Key of `theme.spacing` or any valid CSS value to set spacing between items, `0` by default */\n  spacing?: MantineSpacing;\n\n  /** Determines whether items must be centered with their icon, `false` by default */\n  center?: boolean;\n\n  /** Controls `list-style-type`, by default inferred from `type` */\n  listStyleType?: React.CSSProperties['listStyleType'];\n}\n\nexport type ListFactory = Factory<{\n  props: ListProps;\n  ref: HTMLUListElement;\n  stylesNames: ListStylesNames;\n  vars: ListCssVariables;\n  staticComponents: {\n    Item: typeof ListItem;\n  };\n}>;\n\nconst defaultProps: Partial<ListProps> = {\n  type: 'unordered',\n};\n\nconst varsResolver = createVarsResolver<ListFactory>((_, { size, spacing }) => ({\n  root: {\n    '--list-fz': getFontSize(size),\n    '--list-lh': getLineHeight(size),\n    '--list-spacing': getSpacing(spacing),\n  },\n}));\n\nexport const List = factory<ListFactory>((_props, ref) => {\n  const props = useProps('List', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    type,\n    withPadding,\n    icon,\n    spacing,\n    center,\n    listStyleType,\n    mod,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<ListFactory>({\n    name: 'List',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <ListProvider value={{ center, icon, getStyles }}>\n      <Box<any>\n        {...getStyles('root', { style: { listStyleType } })}\n        component={type === 'unordered' ? ('ul' as const) : ('ol' as const)}\n        mod={[{ 'with-padding': withPadding }, mod]}\n        ref={ref}\n        {...others}\n      >\n        {children}\n      </Box>\n    </ListProvider>\n  );\n});\n\nList.classes = classes;\nList.displayName = '@mantine/core/List';\nList.Item = ListItem;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAeA,MAAMA,YAAY,GAAG;EACnBC,IAAI,EAAE;AACR,CAAC;AACD,MAAMC,YAAY,GAAGC,kBAAkB,CAAC,CAACC,CAAC,EAAE;EAAEC,IAAI;EAAEC;AAAO,CAAE,MAAM;EACjEC,IAAI,EAAE;IACJ,WAAW,EAAEC,WAAW,CAACH,IAAI,CAAC;IAC9B,WAAW,EAAEI,aAAa,CAACJ,IAAI,CAAC;IAChC,gBAAgB,EAAEK,UAAU,CAACJ,OAAO;EACrC;AACH,CAAC,CAAC,CAAC;AACS,MAACK,IAAI,GAAGC,OAAO,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;EAC3C,MAAMC,KAAK,GAAGC,QAAQ,CAAC,MAAM,EAAEhB,YAAY,EAAEa,MAAM,CAAC;EACpD,MAAM;IACJI,UAAU;IACVC,SAAS;IACTC,KAAK;IACLC,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJC,QAAQ;IACRtB,IAAI;IACJuB,WAAW;IACXC,IAAI;IACJnB,OAAO;IACPoB,MAAM;IACNC,aAAa;IACbC,GAAG;IACH,GAAGC;EACJ,IAAGd,KAAK;EACT,MAAMe,SAAS,GAAGC,SAAS,CAAC;IAC1BC,IAAI,EAAE,MAAM;IACZC,OAAO;IACPlB,KAAK;IACLG,SAAS;IACTC,KAAK;IACLF,UAAU;IACVG,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJpB;EACJ,CAAG,CAAC;EACF,sBAAuBgC,KAAK,CAACC,aAAa,CAACC,YAAY,EAAE;IAAEC,KAAK,EAAE;MAAEX,MAAM;MAAED,IAAI;MAAEK;IAAS;EAAI,kBAAkBI,KAAK,CAACC,aAAa,CAClIG,GAAG,EACH;IACE,GAAGR,SAAS,CAAC,MAAM,EAAE;MAAEX,KAAK,EAAE;QAAEQ;MAAe;IAAA,CAAE,CAAC;IAClDY,SAAS,EAAEtC,IAAI,KAAK,WAAW,GAAG,IAAI,GAAG,IAAI;IAC7C2B,GAAG,EAAE,CAAC;MAAE,cAAc,EAAEJ;IAAW,CAAE,EAAEI,GAAG,CAAC;IAC3Cd,GAAG;IACH,GAAGe;EACJ,GACDN,QACJ,CAAG,CAAC;AACJ,CAAC,CAAE;AACHZ,IAAI,CAACsB,OAAO,GAAGA,OAAO;AACtBtB,IAAI,CAAC6B,WAAW,GAAG,oBAAoB;AACvC7B,IAAI,CAAC8B,IAAI,GAAGC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}