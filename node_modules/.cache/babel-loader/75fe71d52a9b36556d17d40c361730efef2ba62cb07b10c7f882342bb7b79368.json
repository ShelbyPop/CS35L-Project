{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nimport { useId, useWindowEvent, useFocusReturn } from '@mantine/hooks';\nimport { useLockScroll } from './use-lock-scroll.mjs';\nfunction useModal({\n  id,\n  transitionProps,\n  opened,\n  trapFocus,\n  closeOnEscape,\n  onClose,\n  returnFocus\n}) {\n  const _id = useId(id);\n  const [titleMounted, setTitleMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n  const transitionDuration = typeof transitionProps?.duration === \"number\" ? transitionProps?.duration : 200;\n  const shouldLockScroll = useLockScroll({\n    opened,\n    transitionDuration\n  });\n  useWindowEvent(\"keydown\", event => {\n    if (!trapFocus && event.key === \"Escape\" && closeOnEscape) {\n      onClose();\n    }\n  });\n  useFocusReturn({\n    opened,\n    shouldReturnFocus: trapFocus && returnFocus\n  });\n  return {\n    _id,\n    titleMounted,\n    bodyMounted,\n    shouldLockScroll,\n    setTitleMounted,\n    setBodyMounted\n  };\n}\nexport { useModal };","map":{"version":3,"names":["useModal","id","transitionProps","opened","trapFocus","closeOnEscape","onClose","returnFocus","_id","useId","titleMounted","setTitleMounted","useState","bodyMounted","setBodyMounted","transitionDuration","duration","shouldLockScroll","useLockScroll","useWindowEvent","event","key","useFocusReturn","shouldReturnFocus"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/components/ModalBase/use-modal.ts"],"sourcesContent":["import { useState } from 'react';\nimport { useFocusReturn, useId, useWindowEvent } from '@mantine/hooks';\nimport { TransitionOverride } from '../Transition';\nimport { useLockScroll } from './use-lock-scroll';\n\ninterface UseModalInput {\n  opened: boolean;\n  onClose: () => void;\n  id: string | undefined;\n  transitionProps: TransitionOverride | undefined;\n  trapFocus: boolean | undefined;\n  closeOnEscape: boolean | undefined;\n  returnFocus: boolean | undefined;\n}\n\nexport function useModal({\n  id,\n  transitionProps,\n  opened,\n  trapFocus,\n  closeOnEscape,\n  onClose,\n  returnFocus,\n}: UseModalInput) {\n  const _id = useId(id);\n  const [titleMounted, setTitleMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n\n  const transitionDuration =\n    typeof transitionProps?.duration === 'number' ? transitionProps?.duration : 200;\n\n  const shouldLockScroll = useLockScroll({ opened, transitionDuration });\n\n  useWindowEvent('keydown', (event) => {\n    if (!trapFocus && event.key === 'Escape' && closeOnEscape) {\n      onClose();\n    }\n  });\n\n  useFocusReturn({ opened, shouldReturnFocus: trapFocus && returnFocus });\n\n  return {\n    _id,\n    titleMounted,\n    bodyMounted,\n    shouldLockScroll,\n    setTitleMounted,\n    setBodyMounted,\n  };\n}\n"],"mappings":";;;;;AAIO,SAASA,QAAQA,CAAC;EACvBC,EAAE;EACFC,eAAe;EACfC,MAAM;EACNC,SAAS;EACTC,aAAa;EACbC,OAAO;EACPC;AACF,CAAC,EAAE;EACD,MAAMC,GAAG,GAAGC,KAAK,CAACR,EAAE,CAAC;EACrB,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGF,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMG,kBAAkB,GAAG,OAAOb,eAAe,EAAEc,QAAQ,KAAK,QAAQ,GAAGd,eAAe,EAAEc,QAAQ,GAAG,GAAG;EAC1G,MAAMC,gBAAgB,GAAGC,aAAa,CAAC;IAAEf,MAAM;IAAEY;EAAoB,EAAC;EACtEI,cAAc,CAAC,SAAS,EAAGC,KAAK,IAAK;IACnC,IAAI,CAAChB,SAAS,IAAIgB,KAAK,CAACC,GAAG,KAAK,QAAQ,IAAIhB,aAAa,EAAE;MACzDC,OAAO,EAAE;IACV;EACL,CAAG,CAAC;EACFgB,cAAc,CAAC;IAAEnB,MAAM;IAAEoB,iBAAiB,EAAEnB,SAAS,IAAIG;EAAa,EAAC;EACvE,OAAO;IACLC,GAAG;IACHE,YAAY;IACZG,WAAW;IACXI,gBAAgB;IAChBN,eAAe;IACfG;EACJ,CAAG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}