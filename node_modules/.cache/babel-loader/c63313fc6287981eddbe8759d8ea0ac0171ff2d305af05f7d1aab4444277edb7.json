{"ast":null,"code":"'use client';\n\nimport { useRef, useCallback, useEffect } from 'react';\nimport { useReducedMotion } from '../use-reduced-motion/use-reduced-motion.mjs';\nimport { useWindowEvent } from '../use-window-event/use-window-event.mjs';\nimport { easeInOutQuad } from './utils/ease-in-out-quad.mjs';\nimport { getRelativePosition } from './utils/get-relative-position.mjs';\nimport { getScrollStart } from './utils/get-scroll-start.mjs';\nimport { setScrollParam } from './utils/set-scroll-param.mjs';\nfunction useScrollIntoView({\n  duration = 1250,\n  axis = \"y\",\n  onScrollFinish,\n  easing = easeInOutQuad,\n  offset = 0,\n  cancelable = true,\n  isList = false\n} = {}) {\n  const frameID = useRef(0);\n  const startTime = useRef(0);\n  const shouldStop = useRef(false);\n  const scrollableRef = useRef(null);\n  const targetRef = useRef(null);\n  const reducedMotion = useReducedMotion();\n  const cancel = () => {\n    if (frameID.current) {\n      cancelAnimationFrame(frameID.current);\n    }\n  };\n  const scrollIntoView = useCallback(({\n    alignment = \"start\"\n  } = {}) => {\n    shouldStop.current = false;\n    if (frameID.current) {\n      cancel();\n    }\n    const start = getScrollStart({\n      parent: scrollableRef.current,\n      axis\n    }) ?? 0;\n    const change = getRelativePosition({\n      parent: scrollableRef.current,\n      target: targetRef.current,\n      axis,\n      alignment,\n      offset,\n      isList\n    }) - (scrollableRef.current ? 0 : start);\n    function animateScroll() {\n      if (startTime.current === 0) {\n        startTime.current = performance.now();\n      }\n      const now = performance.now();\n      const elapsed = now - startTime.current;\n      const t = reducedMotion || duration === 0 ? 1 : elapsed / duration;\n      const distance = start + change * easing(t);\n      setScrollParam({\n        parent: scrollableRef.current,\n        axis,\n        distance\n      });\n      if (!shouldStop.current && t < 1) {\n        frameID.current = requestAnimationFrame(animateScroll);\n      } else {\n        typeof onScrollFinish === \"function\" && onScrollFinish();\n        startTime.current = 0;\n        frameID.current = 0;\n        cancel();\n      }\n    }\n    animateScroll();\n  }, [axis, duration, easing, isList, offset, onScrollFinish, reducedMotion]);\n  const handleStop = () => {\n    if (cancelable) {\n      shouldStop.current = true;\n    }\n  };\n  useWindowEvent(\"wheel\", handleStop, {\n    passive: true\n  });\n  useWindowEvent(\"touchmove\", handleStop, {\n    passive: true\n  });\n  useEffect(() => cancel, []);\n  return {\n    scrollableRef,\n    targetRef,\n    scrollIntoView,\n    cancel\n  };\n}\nexport { useScrollIntoView };","map":{"version":3,"names":["useScrollIntoView","duration","axis","onScrollFinish","easing","easeInOutQuad","offset","cancelable","isList","frameID","useRef","startTime","shouldStop","scrollableRef","targetRef","reducedMotion","useReducedMotion","cancel","current","cancelAnimationFrame","scrollIntoView","useCallback","alignment","start","getScrollStart","parent","change","getRelativePosition","target","animateScroll","performance","now","elapsed","t","distance","setScrollParam","requestAnimationFrame","handleStop","useWindowEvent","passive","useEffect"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/hooks/src/use-scroll-into-view/use-scroll-into-view.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { useReducedMotion } from '../use-reduced-motion/use-reduced-motion';\nimport { useWindowEvent } from '../use-window-event/use-window-event';\nimport { easeInOutQuad } from './utils/ease-in-out-quad';\nimport { getRelativePosition } from './utils/get-relative-position';\nimport { getScrollStart } from './utils/get-scroll-start';\nimport { setScrollParam } from './utils/set-scroll-param';\n\ninterface ScrollIntoViewAnimation {\n  /** target element alignment relatively to parent based on current axis */\n  alignment?: 'start' | 'end' | 'center';\n}\n\ninterface ScrollIntoViewParams {\n  /** callback fired after scroll */\n  onScrollFinish?: () => void;\n\n  /** duration of scroll in milliseconds */\n  duration?: number;\n\n  /** axis of scroll */\n  axis?: 'x' | 'y';\n\n  /** custom mathematical easing function */\n  easing?: (t: number) => number;\n\n  /** additional distance between nearest edge and element */\n  offset?: number;\n\n  /** indicator if animation may be interrupted by user scrolling */\n  cancelable?: boolean;\n\n  /** prevents content jumping in scrolling lists with multiple targets */\n  isList?: boolean;\n}\n\ninterface ScrollIntoViewReturnType<\n  Target extends HTMLElement,\n  Parent extends HTMLElement | null = null,\n> {\n  scrollableRef: React.MutableRefObject<Parent>;\n  targetRef: React.MutableRefObject<Target>;\n  scrollIntoView: (params?: ScrollIntoViewAnimation) => void;\n  cancel: () => void;\n}\n\nexport function useScrollIntoView<\n  Target extends HTMLElement,\n  Parent extends HTMLElement | null = null,\n>({\n  duration = 1250,\n  axis = 'y',\n  onScrollFinish,\n  easing = easeInOutQuad,\n  offset = 0,\n  cancelable = true,\n  isList = false,\n}: ScrollIntoViewParams = {}) {\n  const frameID = useRef(0);\n  const startTime = useRef(0);\n  const shouldStop = useRef(false);\n\n  const scrollableRef = useRef<Parent>(null);\n  const targetRef = useRef<Target>(null);\n\n  const reducedMotion = useReducedMotion();\n\n  const cancel = (): void => {\n    if (frameID.current) {\n      cancelAnimationFrame(frameID.current);\n    }\n  };\n\n  const scrollIntoView = useCallback(\n    ({ alignment = 'start' }: ScrollIntoViewAnimation = {}) => {\n      shouldStop.current = false;\n\n      if (frameID.current) {\n        cancel();\n      }\n\n      const start = getScrollStart({ parent: scrollableRef.current, axis }) ?? 0;\n\n      const change =\n        getRelativePosition({\n          parent: scrollableRef.current,\n          target: targetRef.current,\n          axis,\n          alignment,\n          offset,\n          isList,\n        }) - (scrollableRef.current ? 0 : start);\n\n      function animateScroll() {\n        if (startTime.current === 0) {\n          startTime.current = performance.now();\n        }\n\n        const now = performance.now();\n        const elapsed = now - startTime.current;\n\n        // easing timing progress\n        const t = reducedMotion || duration === 0 ? 1 : elapsed / duration;\n\n        const distance = start + change * easing(t);\n\n        setScrollParam({\n          parent: scrollableRef.current,\n          axis,\n          distance,\n        });\n\n        if (!shouldStop.current && t < 1) {\n          frameID.current = requestAnimationFrame(animateScroll);\n        } else {\n          typeof onScrollFinish === 'function' && onScrollFinish();\n          startTime.current = 0;\n          frameID.current = 0;\n          cancel();\n        }\n      }\n      animateScroll();\n    },\n    [axis, duration, easing, isList, offset, onScrollFinish, reducedMotion]\n  );\n\n  const handleStop = () => {\n    if (cancelable) {\n      shouldStop.current = true;\n    }\n  };\n\n  /**\n   * detection of one of these events stops scroll animation\n   * wheel - mouse wheel / touch pad\n   * touchmove - any touchable device\n   */\n\n  useWindowEvent('wheel', handleStop, {\n    passive: true,\n  });\n\n  useWindowEvent('touchmove', handleStop, {\n    passive: true,\n  });\n\n  // cleanup requestAnimationFrame\n  useEffect(() => cancel, []);\n\n  return {\n    scrollableRef,\n    targetRef,\n    scrollIntoView,\n    cancel,\n  } as ScrollIntoViewReturnType<Target, Parent>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}