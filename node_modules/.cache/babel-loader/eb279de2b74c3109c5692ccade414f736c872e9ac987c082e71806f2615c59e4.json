{"ast":null,"code":"'use client';\n\nimport React, { cloneElement } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { isElement } from '../../../core/utils/is-element/is-element.mjs';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { Popover } from '../../Popover/Popover.mjs';\nimport '../../Popover/PopoverDropdown/PopoverDropdown.mjs';\nimport '../../Popover/PopoverTarget/PopoverTarget.mjs';\nimport { useComboboxContext } from '../Combobox.context.mjs';\nimport { useComboboxTargetProps } from '../use-combobox-target-props/use-combobox-target-props.mjs';\nconst defaultProps = {\n  refProp: \"ref\",\n  targetType: \"input\",\n  withKeyboardNavigation: true,\n  withAriaAttributes: true,\n  withExpandedAttribute: false\n};\nconst ComboboxTarget = factory((props, ref) => {\n  const {\n    children,\n    refProp,\n    withKeyboardNavigation,\n    withAriaAttributes,\n    withExpandedAttribute,\n    targetType,\n    ...others\n  } = useProps(\"ComboboxTarget\", defaultProps, props);\n  if (!isElement(children)) {\n    throw new Error(\"Combobox.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported\");\n  }\n  const ctx = useComboboxContext();\n  const targetProps = useComboboxTargetProps({\n    targetType,\n    withAriaAttributes,\n    withKeyboardNavigation,\n    withExpandedAttribute,\n    onKeyDown: children.props.onKeyDown\n  });\n  const clonedElement = cloneElement(children, {\n    ...targetProps,\n    ...others\n  });\n  return /* @__PURE__ */React.createElement(Popover.Target, {\n    ref: useMergedRef(ref, ctx.store.targetRef)\n  }, clonedElement);\n});\nComboboxTarget.displayName = \"@mantine/core/ComboboxTarget\";\nexport { ComboboxTarget };","map":{"version":3,"names":["defaultProps","refProp","targetType","withKeyboardNavigation","withAriaAttributes","withExpandedAttribute","ComboboxTarget","factory","props","ref","children","others","useProps","isElement","Error","ctx","useComboboxContext","targetProps","useComboboxTargetProps","onKeyDown","clonedElement","cloneElement","React","createElement","Popover","Target","useMergedRef","store","targetRef","displayName"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/components/Combobox/ComboboxTarget/ComboboxTarget.tsx"],"sourcesContent":["import React, { cloneElement } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { factory, Factory, isElement, useProps } from '../../../core';\nimport { Popover } from '../../Popover';\nimport { useComboboxContext } from '../Combobox.context';\nimport { useComboboxTargetProps } from '../use-combobox-target-props/use-combobox-target-props';\n\nexport interface ComboboxTargetProps {\n  /** Target element */\n  children: React.ReactNode;\n\n  /** Key of the prop that should be used to access element ref */\n  refProp?: string;\n\n  /** Determines whether component should respond to keyboard events, `true` by default */\n  withKeyboardNavigation?: boolean;\n\n  /** Determines whether the target should have `aria-` attributes, `true` by default */\n  withAriaAttributes?: boolean;\n\n  /** Determines whether the target should have `aria-expanded` attribute, `false` by default */\n  withExpandedAttribute?: boolean;\n\n  /** Determines which events should be handled by the target element.\n   * `button` target type handles `Space` and `Enter` keys to toggle dropdown opened state.\n   * `input` by default.\n   * */\n  targetType?: 'button' | 'input';\n}\n\nconst defaultProps: Partial<ComboboxTargetProps> = {\n  refProp: 'ref',\n  targetType: 'input',\n  withKeyboardNavigation: true,\n  withAriaAttributes: true,\n  withExpandedAttribute: false,\n};\n\nexport type ComboboxTargetFactory = Factory<{\n  props: ComboboxTargetProps;\n  ref: HTMLElement;\n  compound: true;\n}>;\n\nexport const ComboboxTarget = factory<ComboboxTargetFactory>((props, ref) => {\n  const {\n    children,\n    refProp,\n    withKeyboardNavigation,\n    withAriaAttributes,\n    withExpandedAttribute,\n    targetType,\n    ...others\n  } = useProps('ComboboxTarget', defaultProps, props);\n\n  if (!isElement(children)) {\n    throw new Error(\n      'Combobox.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported'\n    );\n  }\n\n  const ctx = useComboboxContext();\n\n  const targetProps = useComboboxTargetProps({\n    targetType,\n    withAriaAttributes,\n    withKeyboardNavigation,\n    withExpandedAttribute,\n    onKeyDown: children.props.onKeyDown,\n  });\n\n  const clonedElement = cloneElement(children, {\n    ...targetProps,\n    ...others,\n  });\n\n  return (\n    <Popover.Target ref={useMergedRef(ref, ctx.store.targetRef)}>{clonedElement}</Popover.Target>\n  );\n});\n\nComboboxTarget.displayName = '@mantine/core/ComboboxTarget';\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAOA,MAAMA,YAAY,GAAG;EACnBC,OAAO,EAAE,KAAK;EACdC,UAAU,EAAE,OAAO;EACnBC,sBAAsB,EAAE,IAAI;EAC5BC,kBAAkB,EAAE,IAAI;EACxBC,qBAAqB,EAAE;AACzB,CAAC;AACW,MAACC,cAAc,GAAGC,OAAO,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;EACpD,MAAM;IACJC,QAAQ;IACRT,OAAO;IACPE,sBAAsB;IACtBC,kBAAkB;IAClBC,qBAAqB;IACrBH,UAAU;IACV,GAAGS;EACJ,IAAGC,QAAQ,CAAC,gBAAgB,EAAEZ,YAAY,EAAEQ,KAAK,CAAC;EACnD,IAAI,CAACK,SAAS,CAACH,QAAQ,CAAC,EAAE;IACxB,MAAM,IAAII,KAAK,CACb,mKACN,CAAK;EACF;EACD,MAAMC,GAAG,GAAGC,kBAAkB,EAAE;EAChC,MAAMC,WAAW,GAAGC,sBAAsB,CAAC;IACzChB,UAAU;IACVE,kBAAkB;IAClBD,sBAAsB;IACtBE,qBAAqB;IACrBc,SAAS,EAAET,QAAQ,CAACF,KAAK,CAACW;EAC9B,CAAG,CAAC;EACF,MAAMC,aAAa,GAAGC,YAAY,CAACX,QAAQ,EAAE;IAC3C,GAAGO,WAAW;IACd,GAAGN;EACP,CAAG,CAAC;EACF,sBAAuBW,KAAK,CAACC,aAAa,CAACC,OAAO,CAACC,MAAM,EAAE;IAAEhB,GAAG,EAAEiB,YAAY,CAACjB,GAAG,EAAEM,GAAG,CAACY,KAAK,CAACC,SAAS;EAAG,GAAER,aAAa,CAAC;AAC5H,CAAC,CAAE;AACHd,cAAc,CAACuB,WAAW,GAAG,8BAA8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}