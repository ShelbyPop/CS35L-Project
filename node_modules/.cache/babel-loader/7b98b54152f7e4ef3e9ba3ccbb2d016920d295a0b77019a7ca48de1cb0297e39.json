{"ast":null,"code":"'use client';\n\nimport React, { forwardRef } from 'react';\nimport { rem } from '../../../core/utils/units-converters/rem.mjs';\nimport 'clsx';\nimport '@mantine/hooks';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { ColorSlider } from '../ColorSlider/ColorSlider.mjs';\nimport { round } from '../converters/parsers.mjs';\nconst defaultProps = {};\nconst AlphaSlider = forwardRef((props, ref) => {\n  const {\n    value,\n    onChange,\n    onChangeEnd,\n    color,\n    ...others\n  } = useProps(\"AlphaSlider\", defaultProps, props);\n  return /* @__PURE__ */React.createElement(ColorSlider, {\n    ...others,\n    ref,\n    value,\n    onChange: val => onChange?.(round(val, 2)),\n    onChangeEnd: val => onChangeEnd?.(round(val, 2)),\n    maxValue: 1,\n    round: false,\n    \"data-alpha\": true,\n    overlays: [{\n      backgroundImage: \"linear-gradient(45deg, var(--_slider-checkers) 25%, transparent 25%), linear-gradient(-45deg, var(--_slider-checkers) 25%, transparent 25%), linear-gradient(45deg, transparent 75%, var(--_slider-checkers) 75%), linear-gradient(-45deg, var(--mantine-color-body) 75%, var(--_slider-checkers) 75%)\",\n      backgroundSize: `${rem(8)} ${rem(8)}`,\n      backgroundPosition: `0 0, 0 ${rem(4)}, ${rem(4)} ${rem(-4)}, ${rem(-4)} 0`\n    }, {\n      backgroundImage: `linear-gradient(90deg, transparent, ${color})`\n    }, {\n      boxShadow: `rgba(0, 0, 0, .1) 0 0 0 ${rem(1)} inset, rgb(0, 0, 0, .15) 0 0 ${rem(4)} inset`\n    }]\n  });\n});\nAlphaSlider.displayName = \"@mantine/core/AlphaSlider\";\nexport { AlphaSlider };","map":{"version":3,"names":["defaultProps","AlphaSlider","forwardRef","props","ref","value","onChange","onChangeEnd","color","others","useProps","React","createElement","ColorSlider","val","round","maxValue","overlays","backgroundImage","backgroundSize","rem","backgroundPosition","boxShadow","displayName"],"sources":["/Users/virounikamina/pompom/node_modules/@mantine/core/src/components/ColorPicker/AlphaSlider/AlphaSlider.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { rem, useProps } from '../../../core';\nimport { ColorSlider, ColorSliderProps } from '../ColorSlider/ColorSlider';\nimport { round } from '../converters/parsers';\n\nexport interface AlphaSliderProps\n  extends Omit<ColorSliderProps, 'maxValue' | 'overlays' | 'round'> {\n  color: string;\n}\n\nconst defaultProps: Partial<AlphaSliderProps> = {};\n\nexport const AlphaSlider = forwardRef<HTMLDivElement, AlphaSliderProps>((props, ref) => {\n  const { value, onChange, onChangeEnd, color, ...others } = useProps(\n    'AlphaSlider',\n    defaultProps,\n    props\n  );\n\n  return (\n    <ColorSlider\n      {...others}\n      ref={ref}\n      value={value}\n      onChange={(val) => onChange?.(round(val, 2))}\n      onChangeEnd={(val) => onChangeEnd?.(round(val, 2))}\n      maxValue={1}\n      round={false}\n      data-alpha\n      overlays={[\n        {\n          backgroundImage:\n            'linear-gradient(45deg, var(--_slider-checkers) 25%, transparent 25%), linear-gradient(-45deg, var(--_slider-checkers) 25%, transparent 25%), linear-gradient(45deg, transparent 75%, var(--_slider-checkers) 75%), linear-gradient(-45deg, var(--mantine-color-body) 75%, var(--_slider-checkers) 75%)',\n          backgroundSize: `${rem(8)} ${rem(8)}`,\n          backgroundPosition: `0 0, 0 ${rem(4)}, ${rem(4)} ${rem(-4)}, ${rem(-4)} 0`,\n        },\n        {\n          backgroundImage: `linear-gradient(90deg, transparent, ${color})`,\n        },\n        {\n          boxShadow: `rgba(0, 0, 0, .1) 0 0 0 ${rem(1)} inset, rgb(0, 0, 0, .15) 0 0 ${rem(\n            4\n          )} inset`,\n        },\n      ]}\n    />\n  );\n});\n\nAlphaSlider.displayName = '@mantine/core/AlphaSlider';\n"],"mappings":";;;;;;;;;;;;;;;AAKA,MAAMA,YAAY,GAAG,EAAE;AACX,MAACC,WAAW,GAAGC,UAAU,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;EACpD,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,WAAW;IAAEC,KAAK;IAAE,GAAGC;EAAM,CAAE,GAAGC,QAAQ,CACjE,aAAa,EACbV,YAAY,EACZG,KACJ,CAAG;EACD,sBAAuBQ,KAAK,CAACC,aAAa,CACxCC,WAAW,EACX;IACE,GAAGJ,MAAM;IACTL,GAAG;IACHC,KAAK;IACLC,QAAQ,EAAGQ,GAAG,IAAKR,QAAQ,GAAGS,KAAK,CAACD,GAAG,EAAE,CAAC,CAAC,CAAC;IAC5CP,WAAW,EAAGO,GAAG,IAAKP,WAAW,GAAGQ,KAAK,CAACD,GAAG,EAAE,CAAC,CAAC,CAAC;IAClDE,QAAQ,EAAE,CAAC;IACXD,KAAK,EAAE,KAAK;IACZ,YAAY,EAAE,IAAI;IAClBE,QAAQ,EAAE,CACR;MACEC,eAAe,EAAE,wSAAwS;MACzTC,cAAc,EAAG,GAAEC,GAAG,CAAC,CAAC,CAAE,IAAGA,GAAG,CAAC,CAAC,CAAE,EAAC;MACrCC,kBAAkB,EAAG,UAASD,GAAG,CAAC,CAAC,CAAE,KAAIA,GAAG,CAAC,CAAC,CAAE,IAAGA,GAAG,CAAC,CAAC,CAAC,CAAE,KAAIA,GAAG,CAAC,CAAC,CAAC,CAAE;IACxE,GACD;MACEF,eAAe,EAAG,uCAAsCV,KAAM;IAC/D,GACD;MACEc,SAAS,EAAG,2BAA0BF,GAAG,CAAC,CAAC,CAAE,iCAAgCA,GAAG,CAC9E,CACD,CAAC;IACH;EAEJ,CACL,CAAG;AACH,CAAC,CAAE;AACHnB,WAAW,CAACsB,WAAW,GAAG,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}